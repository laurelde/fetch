(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function e(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(i){if(i.ep)return;i.ep=!0;const o=e(i);fetch(i.href,o)}})();function N(){}function Dt(r,t){for(const e in t)r[e]=t[e];return r}function Sn(r){return r()}function Ht(){return Object.create(null)}function We(r){r.forEach(Sn)}function Rt(r){return typeof r=="function"}function ee(r,t){return r!=r?t==t:r!==t||r&&typeof r=="object"||typeof r=="function"}let nt;function kt(r,t){return nt||(nt=document.createElement("a")),nt.href=t,r===nt.href}function ii(r){return Object.keys(r).length===0}function ri(r,...t){if(r==null)return N;const e=r.subscribe(...t);return e.unsubscribe?()=>e.unsubscribe():e}function Tn(r,t,e,n){if(r){const i=Ln(r,t,e,n);return r[0](i)}}function Ln(r,t,e,n){return r[1]&&n?Dt(e.ctx.slice(),r[1](n(t))):e.ctx}function On(r,t,e,n){if(r[2]&&n){const i=r[2](n(e));if(t.dirty===void 0)return i;if(typeof i=="object"){const o=[],s=Math.max(t.dirty.length,i.length);for(let a=0;a<s;a+=1)o[a]=t.dirty[a]|i[a];return o}return t.dirty|i}return t.dirty}function Dn(r,t,e,n,i,o){if(i){const s=Ln(t,e,n,o);r.p(s,i)}}function Rn(r){if(r.ctx.length>32){const t=[],e=r.ctx.length/32;for(let n=0;n<e;n++)t[n]=-1;return t}return-1}function d(r,t){r.appendChild(t)}function w(r,t,e){r.insertBefore(t,e||null)}function M(r){r.parentNode&&r.parentNode.removeChild(r)}function dt(r,t){for(let e=0;e<r.length;e+=1)r[e]&&r[e].d(t)}function I(r){return document.createElement(r)}function W(r){return document.createTextNode(r)}function L(){return W(" ")}function De(){return W("")}function Ke(r,t,e,n){return r.addEventListener(t,e,n),()=>r.removeEventListener(t,e,n)}function oi(r){return function(t){return t.preventDefault(),r.call(this,t)}}function p(r,t,e){e==null?r.removeAttribute(t):r.getAttribute(t)!==e&&r.setAttribute(t,e)}function si(r){return Array.from(r.childNodes)}function Q(r,t){t=""+t,r.data!==t&&(r.data=t)}function ai(r,t,{bubbles:e=!1,cancelable:n=!1}={}){const i=document.createEvent("CustomEvent");return i.initCustomEvent(r,e,n,t),i}function at(r,t){return new r(t)}let Ye;function Ze(r){Ye=r}function ft(){if(!Ye)throw new Error("Function called outside component initialization");return Ye}function Re(r){ft().$$.on_mount.push(r)}function li(r){ft().$$.after_update.push(r)}function xn(r){ft().$$.on_destroy.push(r)}function xe(){const r=ft();return(t,e,{cancelable:n=!1}={})=>{const i=r.$$.callbacks[t];if(i){const o=ai(t,e,{cancelable:n});return i.slice().forEach(s=>{s.call(r,o)}),!o.defaultPrevented}return!0}}function Bt(r,t){const e=r.$$.callbacks[t.type];e&&e.slice().forEach(n=>n.call(this,t))}const Ve=[],Ut=[];let $e=[];const Vt=[],Mn=Promise.resolve();let It=!1;function wn(){It||(It=!0,Mn.then(Nn))}function Fn(){return wn(),Mn}function bt(r){$e.push(r)}const mt=new Set;let Be=0;function Nn(){if(Be!==0)return;const r=Ye;do{try{for(;Be<Ve.length;){const t=Ve[Be];Be++,Ze(t),ui(t.$$)}}catch(t){throw Ve.length=0,Be=0,t}for(Ze(null),Ve.length=0,Be=0;Ut.length;)Ut.pop()();for(let t=0;t<$e.length;t+=1){const e=$e[t];mt.has(e)||(mt.add(e),e())}$e.length=0}while(Ve.length);for(;Vt.length;)Vt.pop()();It=!1,mt.clear(),Ze(r)}function ui(r){if(r.fragment!==null){r.update(),We(r.before_update);const t=r.dirty;r.dirty=[-1],r.fragment&&r.fragment.p(r.ctx,t),r.after_update.forEach(bt)}}function ci(r){const t=[],e=[];$e.forEach(n=>r.indexOf(n)===-1?t.push(n):e.push(n)),e.forEach(n=>n()),$e=t}const ot=new Set;let ke;function le(){ke={r:0,c:[],p:ke}}function ue(){ke.r||We(ke.c),ke=ke.p}function O(r,t){r&&r.i&&(ot.delete(r),r.i(t))}function D(r,t,e,n){if(r&&r.o){if(ot.has(r))return;ot.add(r),ke.c.push(()=>{ot.delete(r),n&&(e&&r.d(1),n())}),r.o(t)}else n&&n()}function Pn(r,t){const e={},n={},i={$$scope:1};let o=r.length;for(;o--;){const s=r[o],a=t[o];if(a){for(const l in s)l in a||(n[l]=1);for(const l in a)i[l]||(e[l]=a[l],i[l]=1);r[o]=a}else for(const l in s)i[l]=1}for(const s in n)s in e||(e[s]=void 0);return e}function Hn(r){return typeof r=="object"&&r!==null?r:{}}function j(r){r&&r.c()}function V(r,t,e,n){const{fragment:i,after_update:o}=r.$$;i&&i.m(t,e),n||bt(()=>{const s=r.$$.on_mount.map(Sn).filter(Rt);r.$$.on_destroy?r.$$.on_destroy.push(...s):We(s),r.$$.on_mount=[]}),o.forEach(bt)}function G(r,t){const e=r.$$;e.fragment!==null&&(ci(e.after_update),We(e.on_destroy),e.fragment&&e.fragment.d(t),e.on_destroy=e.fragment=null,e.ctx=[])}function di(r,t){r.$$.dirty[0]===-1&&(Ve.push(r),wn(),r.$$.dirty.fill(0)),r.$$.dirty[t/31|0]|=1<<t%31}function de(r,t,e,n,i,o,s,a=[-1]){const l=Ye;Ze(r);const u=r.$$={fragment:null,ctx:[],props:o,update:N,not_equal:i,bound:Ht(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(l?l.$$.context:[])),callbacks:Ht(),dirty:a,skip_bound:!1,root:t.target||l.$$.root};s&&s(u.root);let c=!1;if(u.ctx=e?e(r,t.props||{},(f,v,...m)=>{const b=m.length?m[0]:v;return u.ctx&&i(u.ctx[f],u.ctx[f]=b)&&(!u.skip_bound&&u.bound[f]&&u.bound[f](b),c&&di(r,f)),v}):[],u.update(),c=!0,We(u.before_update),u.fragment=n?n(u.ctx):!1,t.target){if(t.hydrate){const f=si(t.target);u.fragment&&u.fragment.l(f),f.forEach(M)}else u.fragment&&u.fragment.c();t.intro&&O(r.$$.fragment),V(r,t.target,t.anchor,t.customElement),Nn()}Ze(l)}class fe{$destroy(){G(this,1),this.$destroy=N}$on(t,e){if(!Rt(e))return N;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const i=n.indexOf(e);i!==-1&&n.splice(i,1)}}$set(t){this.$$set&&!ii(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}const Ue=[];function kn(r,t){return{subscribe:Bn(r,t).subscribe}}function Bn(r,t=N){let e;const n=new Set;function i(a){if(ee(r,a)&&(r=a,e)){const l=!Ue.length;for(const u of n)u[1](),Ue.push(u,r);if(l){for(let u=0;u<Ue.length;u+=2)Ue[u][0](Ue[u+1]);Ue.length=0}}}function o(a){i(a(r))}function s(a,l=N){const u=[a,l];return n.add(u),n.size===1&&(e=t(i)||N),a(r),()=>{n.delete(u),n.size===0&&e&&(e(),e=null)}}return{set:i,update:o,subscribe:s}}function Un(r,t,e){const n=!Array.isArray(r),i=n?[r]:r,o=t.length<2;return kn(e,s=>{let a=!1;const l=[];let u=0,c=N;const f=()=>{if(u)return;c();const m=t(n?l[0]:l,s);o?s(m):c=Rt(m)?m:N},v=i.map((m,b)=>ri(m,A=>{l[b]=A,u&=~(1<<b),a&&f()},()=>{u|=1<<b}));return a=!0,f(),function(){We(v),c(),a=!1}})}function fi(r,t){if(r instanceof RegExp)return{keys:!1,pattern:r};var e,n,i,o,s=[],a="",l=r.split("/");for(l[0]||l.shift();i=l.shift();)e=i[0],e==="*"?(s.push("wild"),a+="/(.*)"):e===":"?(n=i.indexOf("?",1),o=i.indexOf(".",1),s.push(i.substring(1,~n?n:~o?o:i.length)),a+=~n&&!~o?"(?:/([^/]+?))?":"/([^/]+?)",~o&&(a+=(~n?"?":"")+"\\"+i.substring(o))):a+="/"+i;return{keys:s,pattern:new RegExp("^"+a+(t?"(?=$|/)":"/?$"),"i")}}function hi(r){let t,e,n;const i=[r[2]];var o=r[0];function s(a){let l={};for(let u=0;u<i.length;u+=1)l=Dt(l,i[u]);return{props:l}}return o&&(t=at(o,s()),t.$on("routeEvent",r[7])),{c(){t&&j(t.$$.fragment),e=De()},m(a,l){t&&V(t,a,l),w(a,e,l),n=!0},p(a,l){const u=l&4?Pn(i,[Hn(a[2])]):{};if(l&1&&o!==(o=a[0])){if(t){le();const c=t;D(c.$$.fragment,1,0,()=>{G(c,1)}),ue()}o?(t=at(o,s()),t.$on("routeEvent",a[7]),j(t.$$.fragment),O(t.$$.fragment,1),V(t,e.parentNode,e)):t=null}else o&&t.$set(u)},i(a){n||(t&&O(t.$$.fragment,a),n=!0)},o(a){t&&D(t.$$.fragment,a),n=!1},d(a){a&&M(e),t&&G(t,a)}}}function pi(r){let t,e,n;const i=[{params:r[1]},r[2]];var o=r[0];function s(a){let l={};for(let u=0;u<i.length;u+=1)l=Dt(l,i[u]);return{props:l}}return o&&(t=at(o,s()),t.$on("routeEvent",r[6])),{c(){t&&j(t.$$.fragment),e=De()},m(a,l){t&&V(t,a,l),w(a,e,l),n=!0},p(a,l){const u=l&6?Pn(i,[l&2&&{params:a[1]},l&4&&Hn(a[2])]):{};if(l&1&&o!==(o=a[0])){if(t){le();const c=t;D(c.$$.fragment,1,0,()=>{G(c,1)}),ue()}o?(t=at(o,s()),t.$on("routeEvent",a[6]),j(t.$$.fragment),O(t.$$.fragment,1),V(t,e.parentNode,e)):t=null}else o&&t.$set(u)},i(a){n||(t&&O(t.$$.fragment,a),n=!0)},o(a){t&&D(t.$$.fragment,a),n=!1},d(a){a&&M(e),t&&G(t,a)}}}function mi(r){let t,e,n,i;const o=[pi,hi],s=[];function a(l,u){return l[1]?0:1}return t=a(r),e=s[t]=o[t](r),{c(){e.c(),n=De()},m(l,u){s[t].m(l,u),w(l,n,u),i=!0},p(l,[u]){let c=t;t=a(l),t===c?s[t].p(l,u):(le(),D(s[c],1,1,()=>{s[c]=null}),ue(),e=s[t],e?e.p(l,u):(e=s[t]=o[t](l),e.c()),O(e,1),e.m(n.parentNode,n))},i(l){i||(O(e),i=!0)},o(l){D(e),i=!1},d(l){s[t].d(l),l&&M(n)}}}function Gt(){const r=window.location.href.indexOf("#/");let t=r>-1?window.location.href.substr(r+1):"/";const e=t.indexOf("?");let n="";return e>-1&&(n=t.substr(e+1),t=t.substr(0,e)),{location:t,querystring:n}}const xt=kn(null,function(t){t(Gt());const e=()=>{t(Gt())};return window.addEventListener("hashchange",e,!1),function(){window.removeEventListener("hashchange",e,!1)}});Un(xt,r=>r.location);Un(xt,r=>r.querystring);const $t=Bn(void 0);function gi(r){r?window.scrollTo(r.__svelte_spa_router_scrollX,r.__svelte_spa_router_scrollY):window.scrollTo(0,0)}function vi(r,t,e){let{routes:n={}}=t,{prefix:i=""}=t,{restoreScrollState:o=!1}=t;class s{constructor(E,h){if(!h||typeof h!="function"&&(typeof h!="object"||h._sveltesparouter!==!0))throw Error("Invalid component object");if(!E||typeof E=="string"&&(E.length<1||E.charAt(0)!="/"&&E.charAt(0)!="*")||typeof E=="object"&&!(E instanceof RegExp))throw Error('Invalid value for "path" argument - strings must start with / or *');const{pattern:S,keys:P}=fi(E);this.path=E,typeof h=="object"&&h._sveltesparouter===!0?(this.component=h.component,this.conditions=h.conditions||[],this.userData=h.userData,this.props=h.props||{}):(this.component=()=>Promise.resolve(h),this.conditions=[],this.props={}),this._pattern=S,this._keys=P}match(E){if(i){if(typeof i=="string")if(E.startsWith(i))E=E.substr(i.length)||"/";else return null;else if(i instanceof RegExp){const Z=E.match(i);if(Z&&Z[0])E=E.substr(Z[0].length)||"/";else return null}}const h=this._pattern.exec(E);if(h===null)return null;if(this._keys===!1)return h;const S={};let P=0;for(;P<this._keys.length;){try{S[this._keys[P]]=decodeURIComponent(h[P+1]||"")||null}catch{S[this._keys[P]]=null}P++}return S}async checkConditions(E){for(let h=0;h<this.conditions.length;h++)if(!await this.conditions[h](E))return!1;return!0}}const a=[];n instanceof Map?n.forEach((g,E)=>{a.push(new s(E,g))}):Object.keys(n).forEach(g=>{a.push(new s(g,n[g]))});let l=null,u=null,c={};const f=xe();async function v(g,E){await Fn(),f(g,E)}let m=null,b=null;o&&(b=g=>{g.state&&(g.state.__svelte_spa_router_scrollY||g.state.__svelte_spa_router_scrollX)?m=g.state:m=null},window.addEventListener("popstate",b),li(()=>{gi(m)}));let A=null,y=null;const T=xt.subscribe(async g=>{A=g;let E=0;for(;E<a.length;){const h=a[E].match(g.location);if(!h){E++;continue}const S={route:a[E].path,location:g.location,querystring:g.querystring,userData:a[E].userData,params:h&&typeof h=="object"&&Object.keys(h).length?h:null};if(!await a[E].checkConditions(S)){e(0,l=null),y=null,v("conditionsFailed",S);return}v("routeLoading",Object.assign({},S));const P=a[E].component;if(y!=P){P.loading?(e(0,l=P.loading),y=P,e(1,u=P.loadingParams),e(2,c={}),v("routeLoaded",Object.assign({},S,{component:l,name:l.name,params:u}))):(e(0,l=null),y=null);const Z=await P();if(g!=A)return;e(0,l=Z&&Z.default||Z),y=P}h&&typeof h=="object"&&Object.keys(h).length?e(1,u=h):e(1,u=null),e(2,c=a[E].props),v("routeLoaded",Object.assign({},S,{component:l,name:l.name,params:u})).then(()=>{$t.set(u)});return}e(0,l=null),y=null,$t.set(void 0)});xn(()=>{T(),b&&window.removeEventListener("popstate",b)});function C(g){Bt.call(this,r,g)}function _(g){Bt.call(this,r,g)}return r.$$set=g=>{"routes"in g&&e(3,n=g.routes),"prefix"in g&&e(4,i=g.prefix),"restoreScrollState"in g&&e(5,o=g.restoreScrollState)},r.$$.update=()=>{r.$$.dirty&32&&(history.scrollRestoration=o?"manual":"auto")},[l,u,c,n,i,o,C,_]}class Ei extends fe{constructor(t){super(),de(this,t,vi,mi,ee,{routes:3,prefix:4,restoreScrollState:5})}}var yt=function(r,t){return yt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])},yt(r,t)};function B(r,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");yt(r,t);function e(){this.constructor=r}r.prototype=t===null?Object.create(t):(e.prototype=t.prototype,new e)}var x=function(){return x=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++){e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t},x.apply(this,arguments)};function ae(r){var t=typeof Symbol=="function"&&Symbol.iterator,e=t&&r[t],n=0;if(e)return e.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ct(r,t){var e=typeof Symbol=="function"&&r[Symbol.iterator];if(!e)return r;var n=e.call(r),i,o=[],s;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(a){s={error:a}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(s)throw s.error}}return o}function Vn(r,t,e){if(e||arguments.length===2)for(var n=0,i=t.length,o;n<i;n++)(o||!(n in t))&&(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return r.concat(o||Array.prototype.slice.call(t))}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var ne=function(){function r(t){t===void 0&&(t={}),this.adapter=t}return Object.defineProperty(r,"cssClasses",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(r,"strings",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(r,"numbers",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(r,"defaultAdapter",{get:function(){return{}},enumerable:!1,configurable:!0}),r.prototype.init=function(){},r.prototype.destroy=function(){},r}();/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var re=function(){function r(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];this.root=t,this.initialize.apply(this,Vn([],Ct(n))),this.foundation=e===void 0?this.getDefaultFoundation():e,this.foundation.init(),this.initialSyncWithDOM()}return r.attachTo=function(t){return new r(t,new ne({}))},r.prototype.initialize=function(){},r.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},r.prototype.initialSyncWithDOM=function(){},r.prototype.destroy=function(){this.foundation.destroy()},r.prototype.listen=function(t,e,n){this.root.addEventListener(t,e,n)},r.prototype.unlisten=function(t,e,n){this.root.removeEventListener(t,e,n)},r.prototype.emit=function(t,e,n){n===void 0&&(n=!1);var i;typeof CustomEvent=="function"?i=new CustomEvent(t,{bubbles:n,detail:e}):(i=document.createEvent("CustomEvent"),i.initCustomEvent(t,n,!1,e)),this.root.dispatchEvent(i)},r}();/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function Le(r){return r===void 0&&(r=window),Ii(r)?{passive:!0}:!1}function Ii(r){r===void 0&&(r=window);var t=!1;try{var e={get passive(){return t=!0,!1}},n=function(){};r.document.addEventListener("test",n,e),r.document.removeEventListener("test",n,e)}catch{t=!1}return t}/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function lt(r,t){if(r.closest)return r.closest(t);for(var e=r;e;){if(Ce(e,t))return e;e=e.parentElement}return null}function Ce(r,t){var e=r.matches||r.webkitMatchesSelector||r.msMatchesSelector;return e.call(r,t)}function bi(r){var t=r;if(t.offsetParent!==null)return t.scrollWidth;var e=t.cloneNode(!0);e.style.setProperty("position","absolute"),e.style.setProperty("transform","translate(-9999px, -9999px)"),document.documentElement.appendChild(e);var n=e.scrollWidth;return document.documentElement.removeChild(e),n}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var yi={LABEL_FLOAT_ABOVE:"mdc-floating-label--float-above",LABEL_REQUIRED:"mdc-floating-label--required",LABEL_SHAKE:"mdc-floating-label--shake",ROOT:"mdc-floating-label"};/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Gn=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.shakeAnimationEndHandler=function(){n.handleShakeAnimationEnd()},n}return Object.defineProperty(t,"cssClasses",{get:function(){return yi},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},getWidth:function(){return 0},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.adapter.registerInteractionHandler("animationend",this.shakeAnimationEndHandler)},t.prototype.destroy=function(){this.adapter.deregisterInteractionHandler("animationend",this.shakeAnimationEndHandler)},t.prototype.getWidth=function(){return this.adapter.getWidth()},t.prototype.shake=function(e){var n=t.cssClasses.LABEL_SHAKE;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.float=function(e){var n=t.cssClasses,i=n.LABEL_FLOAT_ABOVE,o=n.LABEL_SHAKE;e?this.adapter.addClass(i):(this.adapter.removeClass(i),this.adapter.removeClass(o))},t.prototype.setRequired=function(e){var n=t.cssClasses.LABEL_REQUIRED;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.handleShakeAnimationEnd=function(){var e=t.cssClasses.LABEL_SHAKE;this.adapter.removeClass(e)},t}(ne);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var $n=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.shake=function(e){this.foundation.shake(e)},t.prototype.float=function(e){this.foundation.float(e)},t.prototype.setRequired=function(e){this.foundation.setRequired(e)},t.prototype.getWidth=function(){return this.foundation.getWidth()},t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},getWidth:function(){return bi(e.root)},registerInteractionHandler:function(i,o){return e.listen(i,o)},deregisterInteractionHandler:function(i,o){return e.unlisten(i,o)}};return new Gn(n)},t}(re);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Fe={LINE_RIPPLE_ACTIVE:"mdc-line-ripple--active",LINE_RIPPLE_DEACTIVATING:"mdc-line-ripple--deactivating"};/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Ci=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.transitionEndHandler=function(i){n.handleTransitionEnd(i)},n}return Object.defineProperty(t,"cssClasses",{get:function(){return Fe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setStyle:function(){},registerEventHandler:function(){},deregisterEventHandler:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.adapter.registerEventHandler("transitionend",this.transitionEndHandler)},t.prototype.destroy=function(){this.adapter.deregisterEventHandler("transitionend",this.transitionEndHandler)},t.prototype.activate=function(){this.adapter.removeClass(Fe.LINE_RIPPLE_DEACTIVATING),this.adapter.addClass(Fe.LINE_RIPPLE_ACTIVE)},t.prototype.setRippleCenter=function(e){this.adapter.setStyle("transform-origin",e+"px center")},t.prototype.deactivate=function(){this.adapter.addClass(Fe.LINE_RIPPLE_DEACTIVATING)},t.prototype.handleTransitionEnd=function(e){var n=this.adapter.hasClass(Fe.LINE_RIPPLE_DEACTIVATING);e.propertyName==="opacity"&&n&&(this.adapter.removeClass(Fe.LINE_RIPPLE_ACTIVE),this.adapter.removeClass(Fe.LINE_RIPPLE_DEACTIVATING))},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var jn=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.activate=function(){this.foundation.activate()},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.setRippleCenter=function(e){this.foundation.setRippleCenter(e)},t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},hasClass:function(i){return e.root.classList.contains(i)},setStyle:function(i,o){return e.root.style.setProperty(i,o)},registerEventHandler:function(i,o){return e.listen(i,o)},deregisterEventHandler:function(i,o){return e.unlisten(i,o)}};return new Ci(n)},t}(re);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var qn={NOTCH_ELEMENT_SELECTOR:".mdc-notched-outline__notch"},jt={NOTCH_ELEMENT_PADDING:8},_t={NO_LABEL:"mdc-notched-outline--no-label",OUTLINE_NOTCHED:"mdc-notched-outline--notched",OUTLINE_UPGRADED:"mdc-notched-outline--upgraded"};/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var _i=function(r){B(t,r);function t(e){return r.call(this,x(x({},t.defaultAdapter),e))||this}return Object.defineProperty(t,"strings",{get:function(){return qn},enumerable:!1,configurable:!0}),Object.defineProperty(t,"cssClasses",{get:function(){return _t},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return jt},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},setNotchWidthProperty:function(){},removeNotchWidthProperty:function(){}}},enumerable:!1,configurable:!0}),t.prototype.notch=function(e){var n=t.cssClasses.OUTLINE_NOTCHED;e>0&&(e+=jt.NOTCH_ELEMENT_PADDING),this.adapter.setNotchWidthProperty(e),this.adapter.addClass(n)},t.prototype.closeNotch=function(){var e=t.cssClasses.OUTLINE_NOTCHED;this.adapter.removeClass(e),this.adapter.removeNotchWidthProperty()},t}(ne);/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Wn=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.initialSyncWithDOM=function(){this.notchElement=this.root.querySelector(qn.NOTCH_ELEMENT_SELECTOR);var e=this.root.querySelector("."+Gn.cssClasses.ROOT);e?(e.style.transitionDuration="0s",this.root.classList.add(_t.OUTLINE_UPGRADED),requestAnimationFrame(function(){e.style.transitionDuration=""})):this.root.classList.add(_t.NO_LABEL)},t.prototype.notch=function(e){this.foundation.notch(e)},t.prototype.closeNotch=function(){this.foundation.closeNotch()},t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},setNotchWidthProperty:function(i){e.notchElement.style.setProperty("width",i+"px")},removeNotchWidthProperty:function(){e.notchElement.style.removeProperty("width")}};return new _i(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Ai={BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation",ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded"},Si={VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top"},qt={DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,INITIAL_ORIGIN_SCALE:.6,PADDING:10,TAP_DELAY_MS:300},it;function Ti(r,t){t===void 0&&(t=!1);var e=r.CSS,n=it;if(typeof it=="boolean"&&!t)return it;var i=e&&typeof e.supports=="function";if(!i)return!1;var o=e.supports("--css-vars","yes"),s=e.supports("(--css-vars: yes)")&&e.supports("color","#00000000");return n=o||s,t||(it=n),n}function Li(r,t,e){if(!r)return{x:0,y:0};var n=t.x,i=t.y,o=n+e.left,s=i+e.top,a,l;if(r.type==="touchstart"){var u=r;a=u.changedTouches[0].pageX-o,l=u.changedTouches[0].pageY-s}else{var c=r;a=c.pageX-o,l=c.pageY-s}return{x:a,y:l}}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Wt=["touchstart","pointerdown","mousedown","keydown"],Kt=["touchend","pointerup","mouseup","contextmenu"],rt=[],Mt=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.activationAnimationHasEnded=!1,n.activationTimer=0,n.fgDeactivationRemovalTimer=0,n.fgScale="0",n.frame={width:0,height:0},n.initialSize=0,n.layoutFrame=0,n.maxRadius=0,n.unboundedCoords={left:0,top:0},n.activationState=n.defaultActivationState(),n.activationTimerCallback=function(){n.activationAnimationHasEnded=!0,n.runDeactivationUXLogicIfReady()},n.activateHandler=function(i){n.activateImpl(i)},n.deactivateHandler=function(){n.deactivateImpl()},n.focusHandler=function(){n.handleFocus()},n.blurHandler=function(){n.handleBlur()},n.resizeHandler=function(){n.layout()},n}return Object.defineProperty(t,"cssClasses",{get:function(){return Ai},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return Si},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return qt},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},browserSupportsCssVars:function(){return!0},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},containsEventTarget:function(){return!0},deregisterDocumentInteractionHandler:function(){},deregisterInteractionHandler:function(){},deregisterResizeHandler:function(){},getWindowPageOffset:function(){return{x:0,y:0}},isSurfaceActive:function(){return!0},isSurfaceDisabled:function(){return!0},isUnbounded:function(){return!0},registerDocumentInteractionHandler:function(){},registerInteractionHandler:function(){},registerResizeHandler:function(){},removeClass:function(){},updateCssVariable:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){var e=this,n=this.supportsPressRipple();if(this.registerRootHandlers(n),n){var i=t.cssClasses,o=i.ROOT,s=i.UNBOUNDED;requestAnimationFrame(function(){e.adapter.addClass(o),e.adapter.isUnbounded()&&(e.adapter.addClass(s),e.layoutInternal())})}},t.prototype.destroy=function(){var e=this;if(this.supportsPressRipple()){this.activationTimer&&(clearTimeout(this.activationTimer),this.activationTimer=0,this.adapter.removeClass(t.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer&&(clearTimeout(this.fgDeactivationRemovalTimer),this.fgDeactivationRemovalTimer=0,this.adapter.removeClass(t.cssClasses.FG_DEACTIVATION));var n=t.cssClasses,i=n.ROOT,o=n.UNBOUNDED;requestAnimationFrame(function(){e.adapter.removeClass(i),e.adapter.removeClass(o),e.removeCssVars()})}this.deregisterRootHandlers(),this.deregisterDeactivationHandlers()},t.prototype.activate=function(e){this.activateImpl(e)},t.prototype.deactivate=function(){this.deactivateImpl()},t.prototype.layout=function(){var e=this;this.layoutFrame&&cancelAnimationFrame(this.layoutFrame),this.layoutFrame=requestAnimationFrame(function(){e.layoutInternal(),e.layoutFrame=0})},t.prototype.setUnbounded=function(e){var n=t.cssClasses.UNBOUNDED;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.handleFocus=function(){var e=this;requestAnimationFrame(function(){return e.adapter.addClass(t.cssClasses.BG_FOCUSED)})},t.prototype.handleBlur=function(){var e=this;requestAnimationFrame(function(){return e.adapter.removeClass(t.cssClasses.BG_FOCUSED)})},t.prototype.supportsPressRipple=function(){return this.adapter.browserSupportsCssVars()},t.prototype.defaultActivationState=function(){return{activationEvent:void 0,hasDeactivationUXRun:!1,isActivated:!1,isProgrammatic:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1}},t.prototype.registerRootHandlers=function(e){var n,i;if(e){try{for(var o=ae(Wt),s=o.next();!s.done;s=o.next()){var a=s.value;this.adapter.registerInteractionHandler(a,this.activateHandler)}}catch(l){n={error:l}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}this.adapter.isUnbounded()&&this.adapter.registerResizeHandler(this.resizeHandler)}this.adapter.registerInteractionHandler("focus",this.focusHandler),this.adapter.registerInteractionHandler("blur",this.blurHandler)},t.prototype.registerDeactivationHandlers=function(e){var n,i;if(e.type==="keydown")this.adapter.registerInteractionHandler("keyup",this.deactivateHandler);else try{for(var o=ae(Kt),s=o.next();!s.done;s=o.next()){var a=s.value;this.adapter.registerDocumentInteractionHandler(a,this.deactivateHandler)}}catch(l){n={error:l}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},t.prototype.deregisterRootHandlers=function(){var e,n;try{for(var i=ae(Wt),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.deregisterInteractionHandler(s,this.activateHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}this.adapter.deregisterInteractionHandler("focus",this.focusHandler),this.adapter.deregisterInteractionHandler("blur",this.blurHandler),this.adapter.isUnbounded()&&this.adapter.deregisterResizeHandler(this.resizeHandler)},t.prototype.deregisterDeactivationHandlers=function(){var e,n;this.adapter.deregisterInteractionHandler("keyup",this.deactivateHandler);try{for(var i=ae(Kt),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.deregisterDocumentInteractionHandler(s,this.deactivateHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.removeCssVars=function(){var e=this,n=t.strings,i=Object.keys(n);i.forEach(function(o){o.indexOf("VAR_")===0&&e.adapter.updateCssVariable(n[o],null)})},t.prototype.activateImpl=function(e){var n=this;if(!this.adapter.isSurfaceDisabled()){var i=this.activationState;if(!i.isActivated){var o=this.previousActivationEvent,s=o&&e!==void 0&&o.type!==e.type;if(!s){i.isActivated=!0,i.isProgrammatic=e===void 0,i.activationEvent=e,i.wasActivatedByPointer=i.isProgrammatic?!1:e!==void 0&&(e.type==="mousedown"||e.type==="touchstart"||e.type==="pointerdown");var a=e!==void 0&&rt.length>0&&rt.some(function(l){return n.adapter.containsEventTarget(l)});if(a){this.resetActivationState();return}e!==void 0&&(rt.push(e.target),this.registerDeactivationHandlers(e)),i.wasElementMadeActive=this.checkElementMadeActive(e),i.wasElementMadeActive&&this.animateActivation(),requestAnimationFrame(function(){rt=[],!i.wasElementMadeActive&&e!==void 0&&(e.key===" "||e.keyCode===32)&&(i.wasElementMadeActive=n.checkElementMadeActive(e),i.wasElementMadeActive&&n.animateActivation()),i.wasElementMadeActive||(n.activationState=n.defaultActivationState())})}}}},t.prototype.checkElementMadeActive=function(e){return e!==void 0&&e.type==="keydown"?this.adapter.isSurfaceActive():!0},t.prototype.animateActivation=function(){var e=this,n=t.strings,i=n.VAR_FG_TRANSLATE_START,o=n.VAR_FG_TRANSLATE_END,s=t.cssClasses,a=s.FG_DEACTIVATION,l=s.FG_ACTIVATION,u=t.numbers.DEACTIVATION_TIMEOUT_MS;this.layoutInternal();var c="",f="";if(!this.adapter.isUnbounded()){var v=this.getFgTranslationCoordinates(),m=v.startPoint,b=v.endPoint;c=m.x+"px, "+m.y+"px",f=b.x+"px, "+b.y+"px"}this.adapter.updateCssVariable(i,c),this.adapter.updateCssVariable(o,f),clearTimeout(this.activationTimer),clearTimeout(this.fgDeactivationRemovalTimer),this.rmBoundedActivationClasses(),this.adapter.removeClass(a),this.adapter.computeBoundingRect(),this.adapter.addClass(l),this.activationTimer=setTimeout(function(){e.activationTimerCallback()},u)},t.prototype.getFgTranslationCoordinates=function(){var e=this.activationState,n=e.activationEvent,i=e.wasActivatedByPointer,o;i?o=Li(n,this.adapter.getWindowPageOffset(),this.adapter.computeBoundingRect()):o={x:this.frame.width/2,y:this.frame.height/2},o={x:o.x-this.initialSize/2,y:o.y-this.initialSize/2};var s={x:this.frame.width/2-this.initialSize/2,y:this.frame.height/2-this.initialSize/2};return{startPoint:o,endPoint:s}},t.prototype.runDeactivationUXLogicIfReady=function(){var e=this,n=t.cssClasses.FG_DEACTIVATION,i=this.activationState,o=i.hasDeactivationUXRun,s=i.isActivated,a=o||!s;a&&this.activationAnimationHasEnded&&(this.rmBoundedActivationClasses(),this.adapter.addClass(n),this.fgDeactivationRemovalTimer=setTimeout(function(){e.adapter.removeClass(n)},qt.FG_DEACTIVATION_MS))},t.prototype.rmBoundedActivationClasses=function(){var e=t.cssClasses.FG_ACTIVATION;this.adapter.removeClass(e),this.activationAnimationHasEnded=!1,this.adapter.computeBoundingRect()},t.prototype.resetActivationState=function(){var e=this;this.previousActivationEvent=this.activationState.activationEvent,this.activationState=this.defaultActivationState(),setTimeout(function(){return e.previousActivationEvent=void 0},t.numbers.TAP_DELAY_MS)},t.prototype.deactivateImpl=function(){var e=this,n=this.activationState;if(n.isActivated){var i=x({},n);n.isProgrammatic?(requestAnimationFrame(function(){e.animateDeactivation(i)}),this.resetActivationState()):(this.deregisterDeactivationHandlers(),requestAnimationFrame(function(){e.activationState.hasDeactivationUXRun=!0,e.animateDeactivation(i),e.resetActivationState()}))}},t.prototype.animateDeactivation=function(e){var n=e.wasActivatedByPointer,i=e.wasElementMadeActive;(n||i)&&this.runDeactivationUXLogicIfReady()},t.prototype.layoutInternal=function(){var e=this;this.frame=this.adapter.computeBoundingRect();var n=Math.max(this.frame.height,this.frame.width),i=function(){var s=Math.sqrt(Math.pow(e.frame.width,2)+Math.pow(e.frame.height,2));return s+t.numbers.PADDING};this.maxRadius=this.adapter.isUnbounded()?n:i();var o=Math.floor(n*t.numbers.INITIAL_ORIGIN_SCALE);this.adapter.isUnbounded()&&o%2!==0?this.initialSize=o-1:this.initialSize=o,this.fgScale=""+this.maxRadius/this.initialSize,this.updateLayoutCssVars()},t.prototype.updateLayoutCssVars=function(){var e=t.strings,n=e.VAR_FG_SIZE,i=e.VAR_LEFT,o=e.VAR_TOP,s=e.VAR_FG_SCALE;this.adapter.updateCssVariable(n,this.initialSize+"px"),this.adapter.updateCssVariable(s,this.fgScale),this.adapter.isUnbounded()&&(this.unboundedCoords={left:Math.round(this.frame.width/2-this.initialSize/2),top:Math.round(this.frame.height/2-this.initialSize/2)},this.adapter.updateCssVariable(i,this.unboundedCoords.left+"px"),this.adapter.updateCssVariable(o,this.unboundedCoords.top+"px"))},t}(ne);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Oe=function(r){B(t,r);function t(){var e=r!==null&&r.apply(this,arguments)||this;return e.disabled=!1,e}return t.attachTo=function(e,n){n===void 0&&(n={isUnbounded:void 0});var i=new t(e);return n.isUnbounded!==void 0&&(i.unbounded=n.isUnbounded),i},t.createAdapter=function(e){return{addClass:function(n){return e.root.classList.add(n)},browserSupportsCssVars:function(){return Ti(window)},computeBoundingRect:function(){return e.root.getBoundingClientRect()},containsEventTarget:function(n){return e.root.contains(n)},deregisterDocumentInteractionHandler:function(n,i){return document.documentElement.removeEventListener(n,i,Le())},deregisterInteractionHandler:function(n,i){return e.root.removeEventListener(n,i,Le())},deregisterResizeHandler:function(n){return window.removeEventListener("resize",n)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return Ce(e.root,":active")},isSurfaceDisabled:function(){return!!e.disabled},isUnbounded:function(){return!!e.unbounded},registerDocumentInteractionHandler:function(n,i){return document.documentElement.addEventListener(n,i,Le())},registerInteractionHandler:function(n,i){return e.root.addEventListener(n,i,Le())},registerResizeHandler:function(n){return window.addEventListener("resize",n)},removeClass:function(n){return e.root.classList.remove(n)},updateCssVariable:function(n,i){return e.root.style.setProperty(n,i)}}},Object.defineProperty(t.prototype,"unbounded",{get:function(){return!!this.isUnbounded},set:function(e){this.isUnbounded=!!e,this.setUnbounded()},enumerable:!1,configurable:!0}),t.prototype.activate=function(){this.foundation.activate()},t.prototype.deactivate=function(){this.foundation.deactivate()},t.prototype.layout=function(){this.foundation.layout()},t.prototype.getDefaultFoundation=function(){return new Mt(t.createAdapter(this))},t.prototype.initialSyncWithDOM=function(){var e=this.root;this.isUnbounded="mdcRippleIsUnbounded"in e.dataset},t.prototype.setUnbounded=function(){this.foundation.setUnbounded(!!this.isUnbounded)},t}(re);/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Kn={ROOT:"mdc-text-field-character-counter"},Oi={ROOT_SELECTOR:"."+Kn.ROOT};/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Xn=function(r){B(t,r);function t(e){return r.call(this,x(x({},t.defaultAdapter),e))||this}return Object.defineProperty(t,"cssClasses",{get:function(){return Kn},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return Oi},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{setContent:function(){}}},enumerable:!1,configurable:!0}),t.prototype.setCounterValue=function(e,n){e=Math.min(e,n),this.adapter.setContent(e+" / "+n)},t}(ne);/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Di=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),t.prototype.getDefaultFoundation=function(){var e=this,n={setContent:function(i){e.root.textContent=i}};return new Xn(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var pe={ARIA_CONTROLS:"aria-controls",ARIA_DESCRIBEDBY:"aria-describedby",INPUT_SELECTOR:".mdc-text-field__input",LABEL_SELECTOR:".mdc-floating-label",LEADING_ICON_SELECTOR:".mdc-text-field__icon--leading",LINE_RIPPLE_SELECTOR:".mdc-line-ripple",OUTLINE_SELECTOR:".mdc-notched-outline",PREFIX_SELECTOR:".mdc-text-field__affix--prefix",SUFFIX_SELECTOR:".mdc-text-field__affix--suffix",TRAILING_ICON_SELECTOR:".mdc-text-field__icon--trailing"},st={DISABLED:"mdc-text-field--disabled",FOCUSED:"mdc-text-field--focused",HELPER_LINE:"mdc-text-field-helper-line",INVALID:"mdc-text-field--invalid",LABEL_FLOATING:"mdc-text-field--label-floating",NO_LABEL:"mdc-text-field--no-label",OUTLINED:"mdc-text-field--outlined",ROOT:"mdc-text-field",TEXTAREA:"mdc-text-field--textarea",WITH_LEADING_ICON:"mdc-text-field--with-leading-icon",WITH_TRAILING_ICON:"mdc-text-field--with-trailing-icon",WITH_INTERNAL_COUNTER:"mdc-text-field--with-internal-counter"},Xt={LABEL_SCALE:.75},Ri=["pattern","min","max","required","step","minlength","maxlength"],xi=["color","date","datetime-local","month","range","time","week"];/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var zt=["mousedown","touchstart"],Qt=["click","keydown"],Mi=function(r){B(t,r);function t(e,n){n===void 0&&(n={});var i=r.call(this,x(x({},t.defaultAdapter),e))||this;return i.isFocused=!1,i.receivedUserInput=!1,i.valid=!0,i.useNativeValidation=!0,i.validateOnValueChange=!0,i.helperText=n.helperText,i.characterCounter=n.characterCounter,i.leadingIcon=n.leadingIcon,i.trailingIcon=n.trailingIcon,i.inputFocusHandler=function(){i.activateFocus()},i.inputBlurHandler=function(){i.deactivateFocus()},i.inputInputHandler=function(){i.handleInput()},i.setPointerXOffset=function(o){i.setTransformOrigin(o)},i.textFieldInteractionHandler=function(){i.handleTextFieldInteraction()},i.validationAttributeChangeHandler=function(o){i.handleValidationAttributeChange(o)},i}return Object.defineProperty(t,"cssClasses",{get:function(){return st},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return pe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Xt},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"shouldAlwaysFloat",{get:function(){var e=this.getNativeInput().type;return xi.indexOf(e)>=0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"shouldFloat",{get:function(){return this.shouldAlwaysFloat||this.isFocused||!!this.getValue()||this.isBadInput()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"shouldShake",{get:function(){return!this.isFocused&&!this.isValid()&&!!this.getValue()},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!0},setInputAttr:function(){},removeInputAttr:function(){},registerTextFieldInteractionHandler:function(){},deregisterTextFieldInteractionHandler:function(){},registerInputInteractionHandler:function(){},deregisterInputInteractionHandler:function(){},registerValidationAttributeChangeHandler:function(){return new MutationObserver(function(){})},deregisterValidationAttributeChangeHandler:function(){},getNativeInput:function(){return null},isFocused:function(){return!1},activateLineRipple:function(){},deactivateLineRipple:function(){},setLineRippleTransformOrigin:function(){},shakeLabel:function(){},floatLabel:function(){},setLabelRequired:function(){},hasLabel:function(){return!1},getLabelWidth:function(){return 0},hasOutline:function(){return!1},notchOutline:function(){},closeOutline:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){var e,n,i,o;this.adapter.hasLabel()&&this.getNativeInput().required&&this.adapter.setLabelRequired(!0),this.adapter.isFocused()?this.inputFocusHandler():this.adapter.hasLabel()&&this.shouldFloat&&(this.notchOutline(!0),this.adapter.floatLabel(!0),this.styleFloating(!0)),this.adapter.registerInputInteractionHandler("focus",this.inputFocusHandler),this.adapter.registerInputInteractionHandler("blur",this.inputBlurHandler),this.adapter.registerInputInteractionHandler("input",this.inputInputHandler);try{for(var s=ae(zt),a=s.next();!a.done;a=s.next()){var l=a.value;this.adapter.registerInputInteractionHandler(l,this.setPointerXOffset)}}catch(f){e={error:f}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}try{for(var u=ae(Qt),c=u.next();!c.done;c=u.next()){var l=c.value;this.adapter.registerTextFieldInteractionHandler(l,this.textFieldInteractionHandler)}}catch(f){i={error:f}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(i)throw i.error}}this.validationObserver=this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler),this.setcharacterCounter(this.getValue().length)},t.prototype.destroy=function(){var e,n,i,o;this.adapter.deregisterInputInteractionHandler("focus",this.inputFocusHandler),this.adapter.deregisterInputInteractionHandler("blur",this.inputBlurHandler),this.adapter.deregisterInputInteractionHandler("input",this.inputInputHandler);try{for(var s=ae(zt),a=s.next();!a.done;a=s.next()){var l=a.value;this.adapter.deregisterInputInteractionHandler(l,this.setPointerXOffset)}}catch(f){e={error:f}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}try{for(var u=ae(Qt),c=u.next();!c.done;c=u.next()){var l=c.value;this.adapter.deregisterTextFieldInteractionHandler(l,this.textFieldInteractionHandler)}}catch(f){i={error:f}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(i)throw i.error}}this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver)},t.prototype.handleTextFieldInteraction=function(){var e=this.adapter.getNativeInput();e&&e.disabled||(this.receivedUserInput=!0)},t.prototype.handleValidationAttributeChange=function(e){var n=this;e.some(function(i){return Ri.indexOf(i)>-1?(n.styleValidity(!0),n.adapter.setLabelRequired(n.getNativeInput().required),!0):!1}),e.indexOf("maxlength")>-1&&this.setcharacterCounter(this.getValue().length)},t.prototype.notchOutline=function(e){if(!(!this.adapter.hasOutline()||!this.adapter.hasLabel()))if(e){var n=this.adapter.getLabelWidth()*Xt.LABEL_SCALE;this.adapter.notchOutline(n)}else this.adapter.closeOutline()},t.prototype.activateFocus=function(){this.isFocused=!0,this.styleFocused(this.isFocused),this.adapter.activateLineRipple(),this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.adapter.shakeLabel(this.shouldShake)),this.helperText&&(this.helperText.isPersistent()||!this.helperText.isValidation()||!this.valid)&&this.helperText.showToScreenReader()},t.prototype.setTransformOrigin=function(e){if(!(this.isDisabled()||this.adapter.hasOutline())){var n=e.touches,i=n?n[0]:e,o=i.target.getBoundingClientRect(),s=i.clientX-o.left;this.adapter.setLineRippleTransformOrigin(s)}},t.prototype.handleInput=function(){this.autoCompleteFocus(),this.setcharacterCounter(this.getValue().length)},t.prototype.autoCompleteFocus=function(){this.receivedUserInput||this.activateFocus()},t.prototype.deactivateFocus=function(){this.isFocused=!1,this.adapter.deactivateLineRipple();var e=this.isValid();this.styleValidity(e),this.styleFocused(this.isFocused),this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.adapter.shakeLabel(this.shouldShake)),this.shouldFloat||(this.receivedUserInput=!1)},t.prototype.getValue=function(){return this.getNativeInput().value},t.prototype.setValue=function(e){if(this.getValue()!==e&&(this.getNativeInput().value=e),this.setcharacterCounter(e.length),this.validateOnValueChange){var n=this.isValid();this.styleValidity(n)}this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.validateOnValueChange&&this.adapter.shakeLabel(this.shouldShake))},t.prototype.isValid=function(){return this.useNativeValidation?this.isNativeInputValid():this.valid},t.prototype.setValid=function(e){this.valid=e,this.styleValidity(e);var n=!e&&!this.isFocused&&!!this.getValue();this.adapter.hasLabel()&&this.adapter.shakeLabel(n)},t.prototype.setValidateOnValueChange=function(e){this.validateOnValueChange=e},t.prototype.getValidateOnValueChange=function(){return this.validateOnValueChange},t.prototype.setUseNativeValidation=function(e){this.useNativeValidation=e},t.prototype.isDisabled=function(){return this.getNativeInput().disabled},t.prototype.setDisabled=function(e){this.getNativeInput().disabled=e,this.styleDisabled(e)},t.prototype.setHelperTextContent=function(e){this.helperText&&this.helperText.setContent(e)},t.prototype.setLeadingIconAriaLabel=function(e){this.leadingIcon&&this.leadingIcon.setAriaLabel(e)},t.prototype.setLeadingIconContent=function(e){this.leadingIcon&&this.leadingIcon.setContent(e)},t.prototype.setTrailingIconAriaLabel=function(e){this.trailingIcon&&this.trailingIcon.setAriaLabel(e)},t.prototype.setTrailingIconContent=function(e){this.trailingIcon&&this.trailingIcon.setContent(e)},t.prototype.setcharacterCounter=function(e){if(this.characterCounter){var n=this.getNativeInput().maxLength;if(n===-1)throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");this.characterCounter.setCounterValue(e,n)}},t.prototype.isBadInput=function(){return this.getNativeInput().validity.badInput||!1},t.prototype.isNativeInputValid=function(){return this.getNativeInput().validity.valid},t.prototype.styleValidity=function(e){var n=t.cssClasses.INVALID;if(e?this.adapter.removeClass(n):this.adapter.addClass(n),this.helperText){this.helperText.setValidity(e);var i=this.helperText.isValidation();if(!i)return;var o=this.helperText.isVisible(),s=this.helperText.getId();o&&s?this.adapter.setInputAttr(pe.ARIA_DESCRIBEDBY,s):this.adapter.removeInputAttr(pe.ARIA_DESCRIBEDBY)}},t.prototype.styleFocused=function(e){var n=t.cssClasses.FOCUSED;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.styleDisabled=function(e){var n=t.cssClasses,i=n.DISABLED,o=n.INVALID;e?(this.adapter.addClass(i),this.adapter.removeClass(o)):this.adapter.removeClass(i),this.leadingIcon&&this.leadingIcon.setDisabled(e),this.trailingIcon&&this.trailingIcon.setDisabled(e)},t.prototype.styleFloating=function(e){var n=t.cssClasses.LABEL_FLOATING;e?this.adapter.addClass(n):this.adapter.removeClass(n)},t.prototype.getNativeInput=function(){var e=this.adapter?this.adapter.getNativeInput():null;return e||{disabled:!1,maxLength:-1,required:!1,type:"input",validity:{badInput:!1,valid:!0},value:""}},t}(ne);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var ve={HELPER_TEXT_PERSISTENT:"mdc-text-field-helper-text--persistent",HELPER_TEXT_VALIDATION_MSG:"mdc-text-field-helper-text--validation-msg",ROOT:"mdc-text-field-helper-text"},Ie={ARIA_HIDDEN:"aria-hidden",ROLE:"role",ROOT_SELECTOR:"."+ve.ROOT};/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var zn=function(r){B(t,r);function t(e){return r.call(this,x(x({},t.defaultAdapter),e))||this}return Object.defineProperty(t,"cssClasses",{get:function(){return ve},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return Ie},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){}}},enumerable:!1,configurable:!0}),t.prototype.getId=function(){return this.adapter.getAttr("id")},t.prototype.isVisible=function(){return this.adapter.getAttr(Ie.ARIA_HIDDEN)!=="true"},t.prototype.setContent=function(e){this.adapter.setContent(e)},t.prototype.isPersistent=function(){return this.adapter.hasClass(ve.HELPER_TEXT_PERSISTENT)},t.prototype.setPersistent=function(e){e?this.adapter.addClass(ve.HELPER_TEXT_PERSISTENT):this.adapter.removeClass(ve.HELPER_TEXT_PERSISTENT)},t.prototype.isValidation=function(){return this.adapter.hasClass(ve.HELPER_TEXT_VALIDATION_MSG)},t.prototype.setValidation=function(e){e?this.adapter.addClass(ve.HELPER_TEXT_VALIDATION_MSG):this.adapter.removeClass(ve.HELPER_TEXT_VALIDATION_MSG)},t.prototype.showToScreenReader=function(){this.adapter.removeAttr(Ie.ARIA_HIDDEN)},t.prototype.setValidity=function(e){var n=this.adapter.hasClass(ve.HELPER_TEXT_PERSISTENT),i=this.adapter.hasClass(ve.HELPER_TEXT_VALIDATION_MSG),o=i&&!e;o?(this.showToScreenReader(),this.adapter.getAttr(Ie.ROLE)==="alert"?this.refreshAlertRole():this.adapter.setAttr(Ie.ROLE,"alert")):this.adapter.removeAttr(Ie.ROLE),!n&&!o&&this.hide()},t.prototype.hide=function(){this.adapter.setAttr(Ie.ARIA_HIDDEN,"true")},t.prototype.refreshAlertRole=function(){var e=this;this.adapter.removeAttr(Ie.ROLE),requestAnimationFrame(function(){e.adapter.setAttr(Ie.ROLE,"alert")})},t}(ne);/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var wi=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},hasClass:function(i){return e.root.classList.contains(i)},getAttr:function(i){return e.root.getAttribute(i)},setAttr:function(i,o){return e.root.setAttribute(i,o)},removeAttr:function(i){return e.root.removeAttribute(i)},setContent:function(i){e.root.textContent=i}};return new zn(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Zt={ICON_EVENT:"MDCTextField:icon",ICON_ROLE:"button"},Fi={ROOT:"mdc-text-field__icon"};/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Yt=["click","keydown"],Jt=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.savedTabIndex=null,n.interactionHandler=function(i){n.handleInteraction(i)},n}return Object.defineProperty(t,"strings",{get:function(){return Zt},enumerable:!1,configurable:!0}),Object.defineProperty(t,"cssClasses",{get:function(){return Fi},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){},notifyIconAction:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){var e,n;this.savedTabIndex=this.adapter.getAttr("tabindex");try{for(var i=ae(Yt),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.registerInteractionHandler(s,this.interactionHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.destroy=function(){var e,n;try{for(var i=ae(Yt),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.deregisterInteractionHandler(s,this.interactionHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.setDisabled=function(e){this.savedTabIndex&&(e?(this.adapter.setAttr("tabindex","-1"),this.adapter.removeAttr("role")):(this.adapter.setAttr("tabindex",this.savedTabIndex),this.adapter.setAttr("role",Zt.ICON_ROLE)))},t.prototype.setAriaLabel=function(e){this.adapter.setAttr("aria-label",e)},t.prototype.setContent=function(e){this.adapter.setContent(e)},t.prototype.handleInteraction=function(e){var n=e.key==="Enter"||e.keyCode===13;(e.type==="click"||n)&&(e.preventDefault(),this.adapter.notifyIconAction())},t}(ne);/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Ni=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),t.prototype.getDefaultFoundation=function(){var e=this,n={getAttr:function(i){return e.root.getAttribute(i)},setAttr:function(i,o){return e.root.setAttribute(i,o)},removeAttr:function(i){return e.root.removeAttribute(i)},setContent:function(i){e.root.textContent=i},registerInteractionHandler:function(i,o){return e.listen(i,o)},deregisterInteractionHandler:function(i,o){return e.unlisten(i,o)},notifyIconAction:function(){return e.emit(Jt.strings.ICON_EVENT,{},!0)}};return new Jt(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Pi=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e,n,i,o,s,a,l){e===void 0&&(e=function(g,E){return new Oe(g,E)}),n===void 0&&(n=function(g){return new jn(g)}),i===void 0&&(i=function(g){return new wi(g)}),o===void 0&&(o=function(g){return new Di(g)}),s===void 0&&(s=function(g){return new Ni(g)}),a===void 0&&(a=function(g){return new $n(g)}),l===void 0&&(l=function(g){return new Wn(g)}),this.input=this.root.querySelector(pe.INPUT_SELECTOR);var u=this.root.querySelector(pe.LABEL_SELECTOR);this.label=u?a(u):null;var c=this.root.querySelector(pe.LINE_RIPPLE_SELECTOR);this.lineRipple=c?n(c):null;var f=this.root.querySelector(pe.OUTLINE_SELECTOR);this.outline=f?l(f):null;var v=zn.strings,m=this.root.nextElementSibling,b=m&&m.classList.contains(st.HELPER_LINE),A=b&&m&&m.querySelector(v.ROOT_SELECTOR);this.helperText=A?i(A):null;var y=Xn.strings,T=this.root.querySelector(y.ROOT_SELECTOR);!T&&b&&m&&(T=m.querySelector(y.ROOT_SELECTOR)),this.characterCounter=T?o(T):null;var C=this.root.querySelector(pe.LEADING_ICON_SELECTOR);this.leadingIcon=C?s(C):null;var _=this.root.querySelector(pe.TRAILING_ICON_SELECTOR);this.trailingIcon=_?s(_):null,this.prefix=this.root.querySelector(pe.PREFIX_SELECTOR),this.suffix=this.root.querySelector(pe.SUFFIX_SELECTOR),this.ripple=this.createRipple(e)},t.prototype.destroy=function(){this.ripple&&this.ripple.destroy(),this.lineRipple&&this.lineRipple.destroy(),this.helperText&&this.helperText.destroy(),this.characterCounter&&this.characterCounter.destroy(),this.leadingIcon&&this.leadingIcon.destroy(),this.trailingIcon&&this.trailingIcon.destroy(),this.label&&this.label.destroy(),this.outline&&this.outline.destroy(),r.prototype.destroy.call(this)},t.prototype.initialSyncWithDOM=function(){this.disabled=this.input.disabled},Object.defineProperty(t.prototype,"value",{get:function(){return this.foundation.getValue()},set:function(e){this.foundation.setValue(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disabled",{get:function(){return this.foundation.isDisabled()},set:function(e){this.foundation.setDisabled(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){return this.foundation.isValid()},set:function(e){this.foundation.setValid(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"required",{get:function(){return this.input.required},set:function(e){this.input.required=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pattern",{get:function(){return this.input.pattern},set:function(e){this.input.pattern=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"minLength",{get:function(){return this.input.minLength},set:function(e){this.input.minLength=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxLength",{get:function(){return this.input.maxLength},set:function(e){e<0?this.input.removeAttribute("maxLength"):this.input.maxLength=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"min",{get:function(){return this.input.min},set:function(e){this.input.min=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"max",{get:function(){return this.input.max},set:function(e){this.input.max=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"step",{get:function(){return this.input.step},set:function(e){this.input.step=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"helperTextContent",{set:function(e){this.foundation.setHelperTextContent(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leadingIconAriaLabel",{set:function(e){this.foundation.setLeadingIconAriaLabel(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leadingIconContent",{set:function(e){this.foundation.setLeadingIconContent(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trailingIconAriaLabel",{set:function(e){this.foundation.setTrailingIconAriaLabel(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trailingIconContent",{set:function(e){this.foundation.setTrailingIconContent(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"useNativeValidation",{set:function(e){this.foundation.setUseNativeValidation(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"prefixText",{get:function(){return this.prefix?this.prefix.textContent:null},set:function(e){this.prefix&&(this.prefix.textContent=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"suffixText",{get:function(){return this.suffix?this.suffix.textContent:null},set:function(e){this.suffix&&(this.suffix.textContent=e)},enumerable:!1,configurable:!0}),t.prototype.focus=function(){this.input.focus()},t.prototype.layout=function(){var e=this.foundation.shouldFloat;this.foundation.notchOutline(e)},t.prototype.getDefaultFoundation=function(){var e=x(x(x(x(x({},this.getRootAdapterMethods()),this.getInputAdapterMethods()),this.getLabelAdapterMethods()),this.getLineRippleAdapterMethods()),this.getOutlineAdapterMethods());return new Mi(e,this.getFoundationMap())},t.prototype.getRootAdapterMethods=function(){var e=this;return{addClass:function(n){return e.root.classList.add(n)},removeClass:function(n){return e.root.classList.remove(n)},hasClass:function(n){return e.root.classList.contains(n)},registerTextFieldInteractionHandler:function(n,i){e.listen(n,i)},deregisterTextFieldInteractionHandler:function(n,i){e.unlisten(n,i)},registerValidationAttributeChangeHandler:function(n){var i=function(a){return a.map(function(l){return l.attributeName}).filter(function(l){return l})},o=new MutationObserver(function(a){return n(i(a))}),s={attributes:!0};return o.observe(e.input,s),o},deregisterValidationAttributeChangeHandler:function(n){n.disconnect()}}},t.prototype.getInputAdapterMethods=function(){var e=this;return{getNativeInput:function(){return e.input},setInputAttr:function(n,i){e.input.setAttribute(n,i)},removeInputAttr:function(n){e.input.removeAttribute(n)},isFocused:function(){return document.activeElement===e.input},registerInputInteractionHandler:function(n,i){e.input.addEventListener(n,i,Le())},deregisterInputInteractionHandler:function(n,i){e.input.removeEventListener(n,i,Le())}}},t.prototype.getLabelAdapterMethods=function(){var e=this;return{floatLabel:function(n){e.label&&e.label.float(n)},getLabelWidth:function(){return e.label?e.label.getWidth():0},hasLabel:function(){return!!e.label},shakeLabel:function(n){e.label&&e.label.shake(n)},setLabelRequired:function(n){e.label&&e.label.setRequired(n)}}},t.prototype.getLineRippleAdapterMethods=function(){var e=this;return{activateLineRipple:function(){e.lineRipple&&e.lineRipple.activate()},deactivateLineRipple:function(){e.lineRipple&&e.lineRipple.deactivate()},setLineRippleTransformOrigin:function(n){e.lineRipple&&e.lineRipple.setRippleCenter(n)}}},t.prototype.getOutlineAdapterMethods=function(){var e=this;return{closeOutline:function(){e.outline&&e.outline.closeNotch()},hasOutline:function(){return!!e.outline},notchOutline:function(n){e.outline&&e.outline.notch(n)}}},t.prototype.getFoundationMap=function(){return{characterCounter:this.characterCounter?this.characterCounter.foundationForTextField:void 0,helperText:this.helperText?this.helperText.foundationForTextField:void 0,leadingIcon:this.leadingIcon?this.leadingIcon.foundationForTextField:void 0,trailingIcon:this.trailingIcon?this.trailingIcon.foundationForTextField:void 0}},t.prototype.createRipple=function(e){var n=this,i=this.root.classList.contains(st.TEXTAREA),o=this.root.classList.contains(st.OUTLINED);if(i||o)return null;var s=x(x({},Oe.createAdapter(this)),{isSurfaceActive:function(){return Ce(n.input,":active")},registerInteractionHandler:function(a,l){n.input.addEventListener(a,l,Le())},deregisterInteractionHandler:function(a,l){n.input.removeEventListener(a,l,Le())}});return e(this.root,new Mt(s))},t}(re);function Hi(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A;return{c(){t=I("label"),e=I("span"),n=I("span"),i=L(),o=I("span"),s=I("span"),a=W(r[1]),u=L(),c=I("span"),f=L(),v=I("input"),p(n,"class","mdc-notched-outline__leading"),p(s,"class","mdc-floating-label"),p(s,"id",l=`${r[0]}-field-label`),p(o,"class","mdc-notched-outline__notch"),p(c,"class","mdc-notched-outline__trailing"),p(e,"class","mdc-notched-outline"),p(v,"type","text"),p(v,"class","mdc-text-field__input"),p(v,"aria-labelledby",m=`${r[0]}-field-label`),p(t,"id",r[0]),p(t,"class","mdc-text-field mdc-text-field--outlined")},m(y,T){w(y,t,T),d(t,e),d(e,n),d(e,i),d(e,o),d(o,s),d(s,a),d(e,u),d(e,c),d(t,f),d(t,v),b||(A=Ke(v,"input",r[2]),b=!0)},p(y,[T]){T&2&&Q(a,y[1]),T&1&&l!==(l=`${y[0]}-field-label`)&&p(s,"id",l),T&1&&m!==(m=`${y[0]}-field-label`)&&p(v,"aria-labelledby",m),T&1&&p(t,"id",y[0])},i:N,o:N,d(y){y&&M(t),b=!1,A()}}}function ki(r,t,e){let{id:n=""}=t,{label:i=""}=t;const o=xe();Re(()=>{new Pi(document.querySelector(`#${n}`))});function s(a){let l=a.srcElement.value;o("valueChanged",{value:l})}return r.$$set=a=>{"id"in a&&e(0,n=a.id),"label"in a&&e(1,i=a.label)},[n,i,s]}class At extends fe{constructor(t){super(),de(this,t,ki,Hi,ee,{id:0,label:1})}}function Bi(r){let t,e,n,i,o,s,a,l,u,c,f;return{c(){t=I("div"),e=I("button"),n=I("span"),i=L(),o=I("span"),s=L(),a=I("span"),l=W(r[0]),p(n,"class","mdc-button__ripple"),p(o,"class","mdc-button__touch"),p(a,"class","mdc-button__label"),p(e,"class",u=`fc-button mdc-button mdc-button--touch ${r[2]}`),e.disabled=r[1],p(t,"class","mdc-touch-target-wrapper")},m(v,m){w(v,t,m),d(t,e),d(e,n),d(e,i),d(e,o),d(e,s),d(e,a),d(a,l),c||(f=Ke(e,"click",r[3]),c=!0)},p(v,[m]){m&1&&Q(l,v[0]),m&4&&u!==(u=`fc-button mdc-button mdc-button--touch ${v[2]}`)&&p(e,"class",u),m&2&&(e.disabled=v[1])},i:N,o:N,d(v){v&&M(t),c=!1,f()}}}function Ui(r,t,e){let{label:n=""}=t,{disabled:i=!1}=t,{theme:o="mdc-button--raised"}=t;const s=xe();function a(l){s("click",{buttonElement:l.currentTarget})}return Re(()=>{new Oe(document.querySelector(".mdc-button"))}),r.$$set=l=>{"label"in l&&e(0,n=l.label),"disabled"in l&&e(1,i=l.disabled),"theme"in l&&e(2,o=l.theme)},[n,i,o,a]}class Je extends fe{constructor(t){super(),de(this,t,Ui,Bi,ee,{label:0,disabled:1,theme:2})}}/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Qe={ANCHOR:"mdc-menu-surface--anchor",ANIMATING_CLOSED:"mdc-menu-surface--animating-closed",ANIMATING_OPEN:"mdc-menu-surface--animating-open",FIXED:"mdc-menu-surface--fixed",IS_OPEN_BELOW:"mdc-menu-surface--is-open-below",OPEN:"mdc-menu-surface--open",ROOT:"mdc-menu-surface"},Ee={CLOSED_EVENT:"MDCMenuSurface:closed",CLOSING_EVENT:"MDCMenuSurface:closing",OPENED_EVENT:"MDCMenuSurface:opened",OPENING_EVENT:"MDCMenuSurface:opening",FOCUSABLE_ELEMENTS:["button:not(:disabled)",'[href]:not([aria-disabled="true"])',"input:not(:disabled)","select:not(:disabled)","textarea:not(:disabled)",'[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(", ")},Xe={TRANSITION_OPEN_DURATION:120,TRANSITION_CLOSE_DURATION:75,MARGIN_TO_EDGE:32,ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO:.67,TOUCH_EVENT_WAIT_MS:30},X;(function(r){r[r.BOTTOM=1]="BOTTOM",r[r.CENTER=2]="CENTER",r[r.RIGHT=4]="RIGHT",r[r.FLIP_RTL=8]="FLIP_RTL"})(X||(X={}));var je;(function(r){r[r.TOP_LEFT=0]="TOP_LEFT",r[r.TOP_RIGHT=4]="TOP_RIGHT",r[r.BOTTOM_LEFT=1]="BOTTOM_LEFT",r[r.BOTTOM_RIGHT=5]="BOTTOM_RIGHT",r[r.TOP_START=8]="TOP_START",r[r.TOP_END=12]="TOP_END",r[r.BOTTOM_START=9]="BOTTOM_START",r[r.BOTTOM_END=13]="BOTTOM_END"})(je||(je={}));/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Se,be,R={LIST_ITEM_ACTIVATED_CLASS:"mdc-list-item--activated",LIST_ITEM_CLASS:"mdc-list-item",LIST_ITEM_DISABLED_CLASS:"mdc-list-item--disabled",LIST_ITEM_SELECTED_CLASS:"mdc-list-item--selected",LIST_ITEM_TEXT_CLASS:"mdc-list-item__text",LIST_ITEM_PRIMARY_TEXT_CLASS:"mdc-list-item__primary-text",ROOT:"mdc-list"},Vi=(Se={},Se[""+R.LIST_ITEM_ACTIVATED_CLASS]="mdc-list-item--activated",Se[""+R.LIST_ITEM_CLASS]="mdc-list-item",Se[""+R.LIST_ITEM_DISABLED_CLASS]="mdc-list-item--disabled",Se[""+R.LIST_ITEM_SELECTED_CLASS]="mdc-list-item--selected",Se[""+R.LIST_ITEM_PRIMARY_TEXT_CLASS]="mdc-list-item__primary-text",Se[""+R.ROOT]="mdc-list",Se),He=(be={},be[""+R.LIST_ITEM_ACTIVATED_CLASS]="mdc-deprecated-list-item--activated",be[""+R.LIST_ITEM_CLASS]="mdc-deprecated-list-item",be[""+R.LIST_ITEM_DISABLED_CLASS]="mdc-deprecated-list-item--disabled",be[""+R.LIST_ITEM_SELECTED_CLASS]="mdc-deprecated-list-item--selected",be[""+R.LIST_ITEM_TEXT_CLASS]="mdc-deprecated-list-item__text",be[""+R.LIST_ITEM_PRIMARY_TEXT_CLASS]="mdc-deprecated-list-item__primary-text",be[""+R.ROOT]="mdc-deprecated-list",be),$={ACTION_EVENT:"MDCList:action",SELECTION_CHANGE_EVENT:"MDCList:selectionChange",ARIA_CHECKED:"aria-checked",ARIA_CHECKED_CHECKBOX_SELECTOR:'[role="checkbox"][aria-checked="true"]',ARIA_CHECKED_RADIO_SELECTOR:'[role="radio"][aria-checked="true"]',ARIA_CURRENT:"aria-current",ARIA_DISABLED:"aria-disabled",ARIA_ORIENTATION:"aria-orientation",ARIA_ORIENTATION_HORIZONTAL:"horizontal",ARIA_ROLE_CHECKBOX_SELECTOR:'[role="checkbox"]',ARIA_SELECTED:"aria-selected",ARIA_INTERACTIVE_ROLES_SELECTOR:'[role="listbox"], [role="menu"]',ARIA_MULTI_SELECTABLE_SELECTOR:'[aria-multiselectable="true"]',CHECKBOX_RADIO_SELECTOR:'input[type="checkbox"], input[type="radio"]',CHECKBOX_SELECTOR:'input[type="checkbox"]',CHILD_ELEMENTS_TO_TOGGLE_TABINDEX:`
    .`+R.LIST_ITEM_CLASS+` button:not(:disabled),
    .`+R.LIST_ITEM_CLASS+` a,
    .`+He[R.LIST_ITEM_CLASS]+` button:not(:disabled),
    .`+He[R.LIST_ITEM_CLASS]+` a
  `,DEPRECATED_SELECTOR:".mdc-deprecated-list",FOCUSABLE_CHILD_ELEMENTS:`
    .`+R.LIST_ITEM_CLASS+` button:not(:disabled),
    .`+R.LIST_ITEM_CLASS+` a,
    .`+R.LIST_ITEM_CLASS+` input[type="radio"]:not(:disabled),
    .`+R.LIST_ITEM_CLASS+` input[type="checkbox"]:not(:disabled),
    .`+He[R.LIST_ITEM_CLASS]+` button:not(:disabled),
    .`+He[R.LIST_ITEM_CLASS]+` a,
    .`+He[R.LIST_ITEM_CLASS]+` input[type="radio"]:not(:disabled),
    .`+He[R.LIST_ITEM_CLASS]+` input[type="checkbox"]:not(:disabled)
  `,RADIO_SELECTOR:'input[type="radio"]',SELECTED_ITEM_SELECTOR:'[aria-selected="true"], [aria-current="true"]'},K={UNSET_INDEX:-1,TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS:300},Gi="evolution";/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var F={UNKNOWN:"Unknown",BACKSPACE:"Backspace",ENTER:"Enter",SPACEBAR:"Spacebar",PAGE_UP:"PageUp",PAGE_DOWN:"PageDown",END:"End",HOME:"Home",ARROW_LEFT:"ArrowLeft",ARROW_UP:"ArrowUp",ARROW_RIGHT:"ArrowRight",ARROW_DOWN:"ArrowDown",DELETE:"Delete",ESCAPE:"Escape",TAB:"Tab"},oe=new Set;oe.add(F.BACKSPACE);oe.add(F.ENTER);oe.add(F.SPACEBAR);oe.add(F.PAGE_UP);oe.add(F.PAGE_DOWN);oe.add(F.END);oe.add(F.HOME);oe.add(F.ARROW_LEFT);oe.add(F.ARROW_UP);oe.add(F.ARROW_RIGHT);oe.add(F.ARROW_DOWN);oe.add(F.DELETE);oe.add(F.ESCAPE);oe.add(F.TAB);var ce={BACKSPACE:8,ENTER:13,SPACEBAR:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40,DELETE:46,ESCAPE:27,TAB:9},se=new Map;se.set(ce.BACKSPACE,F.BACKSPACE);se.set(ce.ENTER,F.ENTER);se.set(ce.SPACEBAR,F.SPACEBAR);se.set(ce.PAGE_UP,F.PAGE_UP);se.set(ce.PAGE_DOWN,F.PAGE_DOWN);se.set(ce.END,F.END);se.set(ce.HOME,F.HOME);se.set(ce.ARROW_LEFT,F.ARROW_LEFT);se.set(ce.ARROW_UP,F.ARROW_UP);se.set(ce.ARROW_RIGHT,F.ARROW_RIGHT);se.set(ce.ARROW_DOWN,F.ARROW_DOWN);se.set(ce.DELETE,F.DELETE);se.set(ce.ESCAPE,F.ESCAPE);se.set(ce.TAB,F.TAB);var Me=new Set;Me.add(F.PAGE_UP);Me.add(F.PAGE_DOWN);Me.add(F.END);Me.add(F.HOME);Me.add(F.ARROW_LEFT);Me.add(F.ARROW_UP);Me.add(F.ARROW_RIGHT);Me.add(F.ARROW_DOWN);function z(r){var t=r.key;if(oe.has(t))return t;var e=se.get(r.keyCode);return e||F.UNKNOWN}/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var $i=["input","button","textarea","select"],he=function(r){var t=r.target;if(t){var e=(""+t.tagName).toLowerCase();$i.indexOf(e)===-1&&r.preventDefault()}};/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function ji(){var r={bufferClearTimeout:0,currentFirstChar:"",sortedIndexCursor:0,typeaheadBuffer:""};return r}function qi(r,t){for(var e=new Map,n=0;n<r;n++){var i=t(n).trim();if(i){var o=i[0].toLowerCase();e.has(o)||e.set(o,[]),e.get(o).push({text:i.toLowerCase(),index:n})}}return e.forEach(function(s){s.sort(function(a,l){return a.index-l.index})}),e}function St(r,t){var e=r.nextChar,n=r.focusItemAtIndex,i=r.sortedIndexByFirstChar,o=r.focusedItemIndex,s=r.skipFocus,a=r.isItemAtIndexDisabled;clearTimeout(t.bufferClearTimeout),t.bufferClearTimeout=setTimeout(function(){Zn(t)},K.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS),t.typeaheadBuffer=t.typeaheadBuffer+e;var l;return t.typeaheadBuffer.length===1?l=Wi(i,o,a,t):l=Ki(i,a,t),l!==-1&&!s&&n(l),l}function Wi(r,t,e,n){var i=n.typeaheadBuffer[0],o=r.get(i);if(!o)return-1;if(i===n.currentFirstChar&&o[n.sortedIndexCursor].index===t){n.sortedIndexCursor=(n.sortedIndexCursor+1)%o.length;var s=o[n.sortedIndexCursor].index;if(!e(s))return s}n.currentFirstChar=i;var a=-1,l;for(l=0;l<o.length;l++)if(!e(o[l].index)){a=l;break}for(;l<o.length;l++)if(o[l].index>t&&!e(o[l].index)){a=l;break}return a!==-1?(n.sortedIndexCursor=a,o[n.sortedIndexCursor].index):-1}function Ki(r,t,e){var n=e.typeaheadBuffer[0],i=r.get(n);if(!i)return-1;var o=i[e.sortedIndexCursor];if(o.text.lastIndexOf(e.typeaheadBuffer,0)===0&&!t(o.index))return o.index;for(var s=(e.sortedIndexCursor+1)%i.length,a=-1;s!==e.sortedIndexCursor;){var l=i[s],u=l.text.lastIndexOf(e.typeaheadBuffer,0)===0,c=!t(l.index);if(u&&c){a=s;break}s=(s+1)%i.length}return a!==-1?(e.sortedIndexCursor=a,i[e.sortedIndexCursor].index):-1}function Qn(r){return r.typeaheadBuffer.length>0}function Zn(r){r.typeaheadBuffer=""}function en(r,t){var e=r.event,n=r.isTargetListItem,i=r.focusedItemIndex,o=r.focusItemAtIndex,s=r.sortedIndexByFirstChar,a=r.isItemAtIndexDisabled,l=z(e)==="ArrowLeft",u=z(e)==="ArrowUp",c=z(e)==="ArrowRight",f=z(e)==="ArrowDown",v=z(e)==="Home",m=z(e)==="End",b=z(e)==="Enter",A=z(e)==="Spacebar";if(e.altKey||e.ctrlKey||e.metaKey||l||u||c||f||v||m||b)return-1;var y=!A&&e.key.length===1;if(y){he(e);var T={focusItemAtIndex:o,focusedItemIndex:i,nextChar:e.key.toLowerCase(),sortedIndexByFirstChar:s,skipFocus:!1,isItemAtIndexDisabled:a};return St(T,t)}if(!A)return-1;n&&he(e);var C=n&&Qn(t);if(C){var T={focusItemAtIndex:o,focusedItemIndex:i,nextChar:" ",sortedIndexByFirstChar:s,skipFocus:!1,isItemAtIndexDisabled:a};return St(T,t)}return-1}/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function Xi(r){return r instanceof Array}var zi=["Alt","Control","Meta","Shift"];function tn(r){var t=new Set(r?zi.filter(function(e){return r.getModifierState(e)}):[]);return function(e){return e.every(function(n){return t.has(n)})&&e.length===t.size}}var Tt=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.wrapFocus=!1,n.isVertical=!0,n.isSingleSelectionList=!1,n.areDisabledItemsFocusable=!0,n.selectedIndex=K.UNSET_INDEX,n.focusedItemIndex=K.UNSET_INDEX,n.useActivatedClass=!1,n.useSelectedAttr=!1,n.ariaCurrentAttrValue=null,n.isCheckboxList=!1,n.isRadioList=!1,n.lastSelectedIndex=null,n.hasTypeahead=!1,n.typeaheadState=ji(),n.sortedIndexByFirstChar=new Map,n}return Object.defineProperty(t,"strings",{get:function(){return $},enumerable:!1,configurable:!0}),Object.defineProperty(t,"cssClasses",{get:function(){return R},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return K},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClassForElementIndex:function(){},focusItemAtIndex:function(){},getAttributeForElementIndex:function(){return null},getFocusedElementIndex:function(){return 0},getListItemCount:function(){return 0},hasCheckboxAtIndex:function(){return!1},hasRadioAtIndex:function(){return!1},isCheckboxCheckedAtIndex:function(){return!1},isFocusInsideList:function(){return!1},isRootFocused:function(){return!1},listItemAtIndexHasClass:function(){return!1},notifyAction:function(){},notifySelectionChange:function(){},removeClassForElementIndex:function(){},setAttributeForElementIndex:function(){},setCheckedCheckboxOrRadioAtIndex:function(){},setTabIndexForListItemChildren:function(){},getPrimaryTextAtIndex:function(){return""}}},enumerable:!1,configurable:!0}),t.prototype.layout=function(){this.adapter.getListItemCount()!==0&&(this.adapter.hasCheckboxAtIndex(0)?this.isCheckboxList=!0:this.adapter.hasRadioAtIndex(0)?this.isRadioList=!0:this.maybeInitializeSingleSelection(),this.hasTypeahead&&(this.sortedIndexByFirstChar=this.typeaheadInitSortedIndex()))},t.prototype.getFocusedItemIndex=function(){return this.focusedItemIndex},t.prototype.setWrapFocus=function(e){this.wrapFocus=e},t.prototype.setVerticalOrientation=function(e){this.isVertical=e},t.prototype.setSingleSelection=function(e){this.isSingleSelectionList=e,e&&(this.maybeInitializeSingleSelection(),this.selectedIndex=this.getSelectedIndexFromDOM())},t.prototype.setDisabledItemsFocusable=function(e){this.areDisabledItemsFocusable=e},t.prototype.maybeInitializeSingleSelection=function(){var e=this.getSelectedIndexFromDOM();if(e!==K.UNSET_INDEX){var n=this.adapter.listItemAtIndexHasClass(e,R.LIST_ITEM_ACTIVATED_CLASS);n&&this.setUseActivatedClass(!0),this.isSingleSelectionList=!0,this.selectedIndex=e}},t.prototype.getSelectedIndexFromDOM=function(){for(var e=K.UNSET_INDEX,n=this.adapter.getListItemCount(),i=0;i<n;i++){var o=this.adapter.listItemAtIndexHasClass(i,R.LIST_ITEM_SELECTED_CLASS),s=this.adapter.listItemAtIndexHasClass(i,R.LIST_ITEM_ACTIVATED_CLASS);if(o||s){e=i;break}}return e},t.prototype.setHasTypeahead=function(e){this.hasTypeahead=e,e&&(this.sortedIndexByFirstChar=this.typeaheadInitSortedIndex())},t.prototype.isTypeaheadInProgress=function(){return this.hasTypeahead&&Qn(this.typeaheadState)},t.prototype.setUseActivatedClass=function(e){this.useActivatedClass=e},t.prototype.setUseSelectedAttribute=function(e){this.useSelectedAttr=e},t.prototype.getSelectedIndex=function(){return this.selectedIndex},t.prototype.setSelectedIndex=function(e,n){n===void 0&&(n={}),this.isIndexValid(e)&&(this.isCheckboxList?this.setCheckboxAtIndex(e,n):this.isRadioList?this.setRadioAtIndex(e,n):this.setSingleSelectionAtIndex(e,n))},t.prototype.handleFocusIn=function(e){e>=0&&(this.focusedItemIndex=e,this.adapter.setAttributeForElementIndex(e,"tabindex","0"),this.adapter.setTabIndexForListItemChildren(e,"0"))},t.prototype.handleFocusOut=function(e){var n=this;e>=0&&(this.adapter.setAttributeForElementIndex(e,"tabindex","-1"),this.adapter.setTabIndexForListItemChildren(e,"-1")),setTimeout(function(){n.adapter.isFocusInsideList()||n.setTabindexToFirstSelectedOrFocusedItem()},0)},t.prototype.isIndexDisabled=function(e){return this.adapter.listItemAtIndexHasClass(e,R.LIST_ITEM_DISABLED_CLASS)},t.prototype.handleKeydown=function(e,n,i){var o=this,s,a=z(e)==="ArrowLeft",l=z(e)==="ArrowUp",u=z(e)==="ArrowRight",c=z(e)==="ArrowDown",f=z(e)==="Home",v=z(e)==="End",m=z(e)==="Enter",b=z(e)==="Spacebar",A=this.isVertical&&c||!this.isVertical&&u,y=this.isVertical&&l||!this.isVertical&&a,T=e.key==="A"||e.key==="a",C=tn(e);if(this.adapter.isRootFocused()){if((y||v)&&C([]))e.preventDefault(),this.focusLastElement();else if((A||f)&&C([]))e.preventDefault(),this.focusFirstElement();else if(y&&C(["Shift"])&&this.isCheckboxList){e.preventDefault();var _=this.focusLastElement();_!==-1&&this.setSelectedIndexOnAction(_,!1)}else if(A&&C(["Shift"])&&this.isCheckboxList){e.preventDefault();var _=this.focusFirstElement();_!==-1&&this.setSelectedIndexOnAction(_,!1)}if(this.hasTypeahead){var g={event:e,focusItemAtIndex:function(S){o.focusItemAtIndex(S)},focusedItemIndex:-1,isTargetListItem:n,sortedIndexByFirstChar:this.sortedIndexByFirstChar,isItemAtIndexDisabled:function(S){return o.isIndexDisabled(S)}};en(g,this.typeaheadState)}return}var E=this.adapter.getFocusedElementIndex();if(!(E===-1&&(E=i,E<0))){if(A&&C([]))he(e),this.focusNextElement(E);else if(y&&C([]))he(e),this.focusPrevElement(E);else if(A&&C(["Shift"])&&this.isCheckboxList){he(e);var _=this.focusNextElement(E);_!==-1&&this.setSelectedIndexOnAction(_,!1)}else if(y&&C(["Shift"])&&this.isCheckboxList){he(e);var _=this.focusPrevElement(E);_!==-1&&this.setSelectedIndexOnAction(_,!1)}else if(f&&C([]))he(e),this.focusFirstElement();else if(v&&C([]))he(e),this.focusLastElement();else if(f&&C(["Control","Shift"])&&this.isCheckboxList){if(he(e),this.isIndexDisabled(E))return;this.focusFirstElement(),this.toggleCheckboxRange(0,E,E)}else if(v&&C(["Control","Shift"])&&this.isCheckboxList){if(he(e),this.isIndexDisabled(E))return;this.focusLastElement(),this.toggleCheckboxRange(E,this.adapter.getListItemCount()-1,E)}else if(T&&C(["Control"])&&this.isCheckboxList)e.preventDefault(),this.checkboxListToggleAll(this.selectedIndex===K.UNSET_INDEX?[]:this.selectedIndex,!0);else if((m||b)&&C([])){if(n){var h=e.target;if(h&&h.tagName==="A"&&m||(he(e),this.isIndexDisabled(E)))return;this.isTypeaheadInProgress()||(this.isSelectableList()&&this.setSelectedIndexOnAction(E,!1),this.adapter.notifyAction(E))}}else if((m||b)&&C(["Shift"])&&this.isCheckboxList){var h=e.target;if(h&&h.tagName==="A"&&m||(he(e),this.isIndexDisabled(E)))return;this.isTypeaheadInProgress()||(this.toggleCheckboxRange((s=this.lastSelectedIndex)!==null&&s!==void 0?s:E,E,E),this.adapter.notifyAction(E))}if(this.hasTypeahead){var g={event:e,focusItemAtIndex:function(P){o.focusItemAtIndex(P)},focusedItemIndex:this.focusedItemIndex,isTargetListItem:n,sortedIndexByFirstChar:this.sortedIndexByFirstChar,isItemAtIndexDisabled:function(P){return o.isIndexDisabled(P)}};en(g,this.typeaheadState)}}},t.prototype.handleClick=function(e,n,i){var o,s=tn(i);e!==K.UNSET_INDEX&&(this.isIndexDisabled(e)||(s([])?(this.isSelectableList()&&this.setSelectedIndexOnAction(e,n),this.adapter.notifyAction(e)):this.isCheckboxList&&s(["Shift"])&&(this.toggleCheckboxRange((o=this.lastSelectedIndex)!==null&&o!==void 0?o:e,e,e),this.adapter.notifyAction(e))))},t.prototype.focusNextElement=function(e){var n=this.adapter.getListItemCount(),i=e,o=null;do{if(i++,i>=n)if(this.wrapFocus)i=0;else return e;if(i===o)return-1;o=o??i}while(!this.areDisabledItemsFocusable&&this.isIndexDisabled(i));return this.focusItemAtIndex(i),i},t.prototype.focusPrevElement=function(e){var n=this.adapter.getListItemCount(),i=e,o=null;do{if(i--,i<0)if(this.wrapFocus)i=n-1;else return e;if(i===o)return-1;o=o??i}while(!this.areDisabledItemsFocusable&&this.isIndexDisabled(i));return this.focusItemAtIndex(i),i},t.prototype.focusFirstElement=function(){return this.focusNextElement(-1)},t.prototype.focusLastElement=function(){return this.focusPrevElement(this.adapter.getListItemCount())},t.prototype.focusInitialElement=function(){var e=this.getFirstSelectedOrFocusedItemIndex();return this.focusItemAtIndex(e),e},t.prototype.setEnabled=function(e,n){this.isIndexValid(e,!1)&&(n?(this.adapter.removeClassForElementIndex(e,R.LIST_ITEM_DISABLED_CLASS),this.adapter.setAttributeForElementIndex(e,$.ARIA_DISABLED,"false")):(this.adapter.addClassForElementIndex(e,R.LIST_ITEM_DISABLED_CLASS),this.adapter.setAttributeForElementIndex(e,$.ARIA_DISABLED,"true")))},t.prototype.setSingleSelectionAtIndex=function(e,n){if(n===void 0&&(n={}),!(this.selectedIndex===e&&!n.forceUpdate)){var i=R.LIST_ITEM_SELECTED_CLASS;this.useActivatedClass&&(i=R.LIST_ITEM_ACTIVATED_CLASS),this.selectedIndex!==K.UNSET_INDEX&&this.adapter.removeClassForElementIndex(this.selectedIndex,i),this.setAriaForSingleSelectionAtIndex(e),this.setTabindexAtIndex(e),e!==K.UNSET_INDEX&&this.adapter.addClassForElementIndex(e,i),this.selectedIndex=e,n.isUserInteraction&&!n.forceUpdate&&this.adapter.notifySelectionChange([e])}},t.prototype.setAriaForSingleSelectionAtIndex=function(e){this.selectedIndex===K.UNSET_INDEX&&(this.ariaCurrentAttrValue=this.adapter.getAttributeForElementIndex(e,$.ARIA_CURRENT));var n=this.ariaCurrentAttrValue!==null,i=n?$.ARIA_CURRENT:$.ARIA_SELECTED;if(this.selectedIndex!==K.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(this.selectedIndex,i,"false"),e!==K.UNSET_INDEX){var o=n?this.ariaCurrentAttrValue:"true";this.adapter.setAttributeForElementIndex(e,i,o)}},t.prototype.getSelectionAttribute=function(){return this.useSelectedAttr?$.ARIA_SELECTED:$.ARIA_CHECKED},t.prototype.setRadioAtIndex=function(e,n){n===void 0&&(n={});var i=this.getSelectionAttribute();this.adapter.setCheckedCheckboxOrRadioAtIndex(e,!0),!(this.selectedIndex===e&&!n.forceUpdate)&&(this.selectedIndex!==K.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(this.selectedIndex,i,"false"),this.adapter.setAttributeForElementIndex(e,i,"true"),this.selectedIndex=e,n.isUserInteraction&&!n.forceUpdate&&this.adapter.notifySelectionChange([e]))},t.prototype.setCheckboxAtIndex=function(e,n){n===void 0&&(n={});for(var i=this.selectedIndex,o=n.isUserInteraction?new Set(i===K.UNSET_INDEX?[]:i):null,s=this.getSelectionAttribute(),a=[],l=0;l<this.adapter.getListItemCount();l++){var u=o==null?void 0:o.has(l),c=e.indexOf(l)>=0;c!==u&&a.push(l),this.adapter.setCheckedCheckboxOrRadioAtIndex(l,c),this.adapter.setAttributeForElementIndex(l,s,c?"true":"false")}this.selectedIndex=e,n.isUserInteraction&&a.length&&this.adapter.notifySelectionChange(a)},t.prototype.toggleCheckboxRange=function(e,n,i){this.lastSelectedIndex=i;for(var o=new Set(this.selectedIndex===K.UNSET_INDEX?[]:this.selectedIndex),s=!(o!=null&&o.has(i)),a=Ct([e,n].sort(),2),l=a[0],u=a[1],c=this.getSelectionAttribute(),f=[],v=l;v<=u;v++)if(!this.isIndexDisabled(v)){var m=o.has(v);s!==m&&(f.push(v),this.adapter.setCheckedCheckboxOrRadioAtIndex(v,s),this.adapter.setAttributeForElementIndex(v,c,""+s),s?o.add(v):o.delete(v))}f.length&&(this.selectedIndex=Vn([],Ct(o)),this.adapter.notifySelectionChange(f))},t.prototype.setTabindexAtIndex=function(e){this.focusedItemIndex===K.UNSET_INDEX&&e!==0?this.adapter.setAttributeForElementIndex(0,"tabindex","-1"):this.focusedItemIndex>=0&&this.focusedItemIndex!==e&&this.adapter.setAttributeForElementIndex(this.focusedItemIndex,"tabindex","-1"),!(this.selectedIndex instanceof Array)&&this.selectedIndex!==e&&this.adapter.setAttributeForElementIndex(this.selectedIndex,"tabindex","-1"),e!==K.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(e,"tabindex","0")},t.prototype.isSelectableList=function(){return this.isSingleSelectionList||this.isCheckboxList||this.isRadioList},t.prototype.setTabindexToFirstSelectedOrFocusedItem=function(){var e=this.getFirstSelectedOrFocusedItemIndex();this.setTabindexAtIndex(e)},t.prototype.getFirstSelectedOrFocusedItemIndex=function(){return this.isSelectableList()?typeof this.selectedIndex=="number"&&this.selectedIndex!==K.UNSET_INDEX?this.selectedIndex:Xi(this.selectedIndex)&&this.selectedIndex.length>0?this.selectedIndex.reduce(function(e,n){return Math.min(e,n)}):0:Math.max(this.focusedItemIndex,0)},t.prototype.isIndexValid=function(e,n){var i=this;if(n===void 0&&(n=!0),e instanceof Array){if(!this.isCheckboxList&&n)throw new Error("MDCListFoundation: Array of index is only supported for checkbox based list");return e.length===0?!0:e.some(function(o){return i.isIndexInRange(o)})}else if(typeof e=="number"){if(this.isCheckboxList&&n)throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: "+e);return this.isIndexInRange(e)||this.isSingleSelectionList&&e===K.UNSET_INDEX}else return!1},t.prototype.isIndexInRange=function(e){var n=this.adapter.getListItemCount();return e>=0&&e<n},t.prototype.setSelectedIndexOnAction=function(e,n){this.lastSelectedIndex=e,this.isCheckboxList?(this.toggleCheckboxAtIndex(e,n),this.adapter.notifySelectionChange([e])):this.setSelectedIndex(e,{isUserInteraction:!0})},t.prototype.toggleCheckboxAtIndex=function(e,n){var i=this.getSelectionAttribute(),o=this.adapter.isCheckboxCheckedAtIndex(e),s;n?s=o:(s=!o,this.adapter.setCheckedCheckboxOrRadioAtIndex(e,s)),this.adapter.setAttributeForElementIndex(e,i,s?"true":"false");var a=this.selectedIndex===K.UNSET_INDEX?[]:this.selectedIndex.slice();s?a.push(e):a=a.filter(function(l){return l!==e}),this.selectedIndex=a},t.prototype.focusItemAtIndex=function(e){this.adapter.focusItemAtIndex(e),this.focusedItemIndex=e},t.prototype.checkboxListToggleAll=function(e,n){var i=this.adapter.getListItemCount();if(e.length===i)this.setCheckboxAtIndex([],{isUserInteraction:n});else{for(var o=[],s=0;s<i;s++)(!this.isIndexDisabled(s)||e.indexOf(s)>-1)&&o.push(s);this.setCheckboxAtIndex(o,{isUserInteraction:n})}},t.prototype.typeaheadMatchItem=function(e,n,i){var o=this;i===void 0&&(i=!1);var s={focusItemAtIndex:function(a){o.focusItemAtIndex(a)},focusedItemIndex:n||this.focusedItemIndex,nextChar:e,sortedIndexByFirstChar:this.sortedIndexByFirstChar,skipFocus:i,isItemAtIndexDisabled:function(a){return o.isIndexDisabled(a)}};return St(s,this.typeaheadState)},t.prototype.typeaheadInitSortedIndex=function(){return qi(this.adapter.getListItemCount(),this.adapter.getPrimaryTextAtIndex)},t.prototype.clearTypeaheadBuffer=function(){Zn(this.typeaheadState)},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Qi=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return Object.defineProperty(t.prototype,"vertical",{set:function(e){this.foundation.setVerticalOrientation(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"listElements",{get:function(){return Array.from(this.root.querySelectorAll("."+this.classNameMap[R.LIST_ITEM_CLASS]))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wrapFocus",{set:function(e){this.foundation.setWrapFocus(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"typeaheadInProgress",{get:function(){return this.foundation.isTypeaheadInProgress()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasTypeahead",{set:function(e){this.foundation.setHasTypeahead(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"singleSelection",{set:function(e){this.foundation.setSingleSelection(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disabledItemsFocusable",{set:function(e){this.foundation.setDisabledItemsFocusable(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectedIndex",{get:function(){return this.foundation.getSelectedIndex()},set:function(e){this.foundation.setSelectedIndex(e)},enumerable:!1,configurable:!0}),t.attachTo=function(e){return new t(e)},t.prototype.initialSyncWithDOM=function(){this.isEvolutionEnabled=Gi in this.root.dataset,this.isEvolutionEnabled?this.classNameMap=Vi:Ce(this.root,$.DEPRECATED_SELECTOR)?this.classNameMap=He:this.classNameMap=Object.values(R).reduce(function(e,n){return e[n]=n,e},{}),this.handleClick=this.handleClickEvent.bind(this),this.handleKeydown=this.handleKeydownEvent.bind(this),this.focusInEventListener=this.handleFocusInEvent.bind(this),this.focusOutEventListener=this.handleFocusOutEvent.bind(this),this.listen("keydown",this.handleKeydown),this.listen("click",this.handleClick),this.listen("focusin",this.focusInEventListener),this.listen("focusout",this.focusOutEventListener),this.layout(),this.initializeListType(),this.ensureFocusable()},t.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown),this.unlisten("click",this.handleClick),this.unlisten("focusin",this.focusInEventListener),this.unlisten("focusout",this.focusOutEventListener)},t.prototype.layout=function(){var e=this.root.getAttribute($.ARIA_ORIENTATION);this.vertical=e!==$.ARIA_ORIENTATION_HORIZONTAL;var n="."+this.classNameMap[R.LIST_ITEM_CLASS]+":not([tabindex])",i=$.FOCUSABLE_CHILD_ELEMENTS,o=this.root.querySelectorAll(n);o.length&&Array.prototype.forEach.call(o,function(a){a.setAttribute("tabindex","-1")});var s=this.root.querySelectorAll(i);s.length&&Array.prototype.forEach.call(s,function(a){a.setAttribute("tabindex","-1")}),this.isEvolutionEnabled&&this.foundation.setUseSelectedAttribute(!0),this.foundation.layout()},t.prototype.getPrimaryText=function(e){var n,i=e.querySelector("."+this.classNameMap[R.LIST_ITEM_PRIMARY_TEXT_CLASS]);if(this.isEvolutionEnabled||i)return(n=i==null?void 0:i.textContent)!==null&&n!==void 0?n:"";var o=e.querySelector("."+this.classNameMap[R.LIST_ITEM_TEXT_CLASS]);return o&&o.textContent||""},t.prototype.initializeListType=function(){var e=this;if(this.isInteractive=Ce(this.root,$.ARIA_INTERACTIVE_ROLES_SELECTOR),this.isEvolutionEnabled&&this.isInteractive){var n=Array.from(this.root.querySelectorAll($.SELECTED_ITEM_SELECTOR),function(a){return e.listElements.indexOf(a)});Ce(this.root,$.ARIA_MULTI_SELECTABLE_SELECTOR)?this.selectedIndex=n:n.length>0&&(this.selectedIndex=n[0]);return}var i=this.root.querySelectorAll($.ARIA_ROLE_CHECKBOX_SELECTOR),o=this.root.querySelector($.ARIA_CHECKED_RADIO_SELECTOR);if(i.length){var s=this.root.querySelectorAll($.ARIA_CHECKED_CHECKBOX_SELECTOR);this.selectedIndex=Array.from(s,function(a){return e.listElements.indexOf(a)})}else o&&(this.selectedIndex=this.listElements.indexOf(o))},t.prototype.setEnabled=function(e,n){this.foundation.setEnabled(e,n)},t.prototype.typeaheadMatchItem=function(e,n){return this.foundation.typeaheadMatchItem(e,n,!0)},t.prototype.getDefaultFoundation=function(){var e=this,n={addClassForElementIndex:function(i,o){var s=e.listElements[i];s&&s.classList.add(e.classNameMap[o])},focusItemAtIndex:function(i){var o=e.listElements[i];o&&o.focus()},getAttributeForElementIndex:function(i,o){return e.listElements[i].getAttribute(o)},getFocusedElementIndex:function(){return e.listElements.indexOf(document.activeElement)},getListItemCount:function(){return e.listElements.length},getPrimaryTextAtIndex:function(i){return e.getPrimaryText(e.listElements[i])},hasCheckboxAtIndex:function(i){var o=e.listElements[i];return!!o.querySelector($.CHECKBOX_SELECTOR)},hasRadioAtIndex:function(i){var o=e.listElements[i];return!!o.querySelector($.RADIO_SELECTOR)},isCheckboxCheckedAtIndex:function(i){var o=e.listElements[i],s=o.querySelector($.CHECKBOX_SELECTOR);return s.checked},isFocusInsideList:function(){return e.root!==document.activeElement&&e.root.contains(document.activeElement)},isRootFocused:function(){return document.activeElement===e.root},listItemAtIndexHasClass:function(i,o){return e.listElements[i].classList.contains(e.classNameMap[o])},notifyAction:function(i){e.emit($.ACTION_EVENT,{index:i},!0)},notifySelectionChange:function(i){e.emit($.SELECTION_CHANGE_EVENT,{changedIndices:i},!0)},removeClassForElementIndex:function(i,o){var s=e.listElements[i];s&&s.classList.remove(e.classNameMap[o])},setAttributeForElementIndex:function(i,o,s){var a=e.listElements[i];a&&a.setAttribute(o,s)},setCheckedCheckboxOrRadioAtIndex:function(i,o){var s=e.listElements[i],a=s.querySelector($.CHECKBOX_RADIO_SELECTOR);a.checked=o;var l=document.createEvent("Event");l.initEvent("change",!0,!0),a.dispatchEvent(l)},setTabIndexForListItemChildren:function(i,o){var s=e.listElements[i],a=$.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;Array.prototype.forEach.call(s.querySelectorAll(a),function(l){l.setAttribute("tabindex",o)})}};return new Tt(n)},t.prototype.ensureFocusable=function(){if(this.isEvolutionEnabled&&this.isInteractive&&!this.root.querySelector("."+this.classNameMap[R.LIST_ITEM_CLASS]+'[tabindex="0"]')){var e=this.initialFocusIndex();e!==-1&&(this.listElements[e].tabIndex=0)}},t.prototype.initialFocusIndex=function(){if(this.selectedIndex instanceof Array&&this.selectedIndex.length>0)return this.selectedIndex[0];if(typeof this.selectedIndex=="number"&&this.selectedIndex!==K.UNSET_INDEX)return this.selectedIndex;var e=this.root.querySelector("."+this.classNameMap[R.LIST_ITEM_CLASS]+":not(."+this.classNameMap[R.LIST_ITEM_DISABLED_CLASS]+")");return e===null?-1:this.getListItemIndex(e)},t.prototype.getListItemIndex=function(e){var n=lt(e,"."+this.classNameMap[R.LIST_ITEM_CLASS]+", ."+this.classNameMap[R.ROOT]);return n&&Ce(n,"."+this.classNameMap[R.LIST_ITEM_CLASS])?this.listElements.indexOf(n):-1},t.prototype.handleFocusInEvent=function(e){var n=this.getListItemIndex(e.target);this.foundation.handleFocusIn(n)},t.prototype.handleFocusOutEvent=function(e){var n=this.getListItemIndex(e.target);this.foundation.handleFocusOut(n)},t.prototype.handleKeydownEvent=function(e){var n=this.getListItemIndex(e.target),i=e.target;this.foundation.handleKeydown(e,i.classList.contains(this.classNameMap[R.LIST_ITEM_CLASS]),n)},t.prototype.handleClickEvent=function(e){var n=this.getListItemIndex(e.target),i=e.target,o=!Ce(i,$.CHECKBOX_RADIO_SELECTOR);this.foundation.handleClick(n,o,e)},t}(re);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Te=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.isSurfaceOpen=!1,n.isQuickOpen=!1,n.isHoistedElement=!1,n.isFixedPosition=!1,n.isHorizontallyCenteredOnViewport=!1,n.maxHeight=0,n.openBottomBias=0,n.openAnimationEndTimerId=0,n.closeAnimationEndTimerId=0,n.animationRequestId=0,n.anchorCorner=je.TOP_START,n.originCorner=je.TOP_START,n.anchorMargin={top:0,right:0,bottom:0,left:0},n.position={x:0,y:0},n}return Object.defineProperty(t,"cssClasses",{get:function(){return Qe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return Ee},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Xe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"Corner",{get:function(){return je},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},hasAnchor:function(){return!1},isElementInContainer:function(){return!1},isFocused:function(){return!1},isRtl:function(){return!1},getInnerDimensions:function(){return{height:0,width:0}},getAnchorDimensions:function(){return null},getWindowDimensions:function(){return{height:0,width:0}},getBodyDimensions:function(){return{height:0,width:0}},getWindowScroll:function(){return{x:0,y:0}},setPosition:function(){},setMaxHeight:function(){},setTransformOrigin:function(){},saveFocus:function(){},restoreFocus:function(){},notifyClose:function(){},notifyClosing:function(){},notifyOpen:function(){},notifyOpening:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){var e=t.cssClasses,n=e.ROOT,i=e.OPEN;if(!this.adapter.hasClass(n))throw new Error(n+" class required in root element.");this.adapter.hasClass(i)&&(this.isSurfaceOpen=!0)},t.prototype.destroy=function(){clearTimeout(this.openAnimationEndTimerId),clearTimeout(this.closeAnimationEndTimerId),cancelAnimationFrame(this.animationRequestId)},t.prototype.setAnchorCorner=function(e){this.anchorCorner=e},t.prototype.flipCornerHorizontally=function(){this.originCorner=this.originCorner^X.RIGHT},t.prototype.setAnchorMargin=function(e){this.anchorMargin.top=e.top||0,this.anchorMargin.right=e.right||0,this.anchorMargin.bottom=e.bottom||0,this.anchorMargin.left=e.left||0},t.prototype.setIsHoisted=function(e){this.isHoistedElement=e},t.prototype.setFixedPosition=function(e){this.isFixedPosition=e},t.prototype.isFixed=function(){return this.isFixedPosition},t.prototype.setAbsolutePosition=function(e,n){this.position.x=this.isFinite(e)?e:0,this.position.y=this.isFinite(n)?n:0},t.prototype.setIsHorizontallyCenteredOnViewport=function(e){this.isHorizontallyCenteredOnViewport=e},t.prototype.setQuickOpen=function(e){this.isQuickOpen=e},t.prototype.setMaxHeight=function(e){this.maxHeight=e},t.prototype.setOpenBottomBias=function(e){this.openBottomBias=e},t.prototype.isOpen=function(){return this.isSurfaceOpen},t.prototype.open=function(){var e=this;this.isSurfaceOpen||(this.adapter.notifyOpening(),this.adapter.saveFocus(),this.isQuickOpen?(this.isSurfaceOpen=!0,this.adapter.addClass(t.cssClasses.OPEN),this.dimensions=this.adapter.getInnerDimensions(),this.autoposition(),this.adapter.notifyOpen()):(this.adapter.addClass(t.cssClasses.ANIMATING_OPEN),this.animationRequestId=requestAnimationFrame(function(){e.dimensions=e.adapter.getInnerDimensions(),e.autoposition(),e.adapter.addClass(t.cssClasses.OPEN),e.openAnimationEndTimerId=setTimeout(function(){e.openAnimationEndTimerId=0,e.adapter.removeClass(t.cssClasses.ANIMATING_OPEN),e.adapter.notifyOpen()},Xe.TRANSITION_OPEN_DURATION)}),this.isSurfaceOpen=!0))},t.prototype.close=function(e){var n=this;if(e===void 0&&(e=!1),!!this.isSurfaceOpen){if(this.adapter.notifyClosing(),this.isQuickOpen){this.isSurfaceOpen=!1,e||this.maybeRestoreFocus(),this.adapter.removeClass(t.cssClasses.OPEN),this.adapter.removeClass(t.cssClasses.IS_OPEN_BELOW),this.adapter.notifyClose();return}this.adapter.addClass(t.cssClasses.ANIMATING_CLOSED),requestAnimationFrame(function(){n.adapter.removeClass(t.cssClasses.OPEN),n.adapter.removeClass(t.cssClasses.IS_OPEN_BELOW),n.closeAnimationEndTimerId=setTimeout(function(){n.closeAnimationEndTimerId=0,n.adapter.removeClass(t.cssClasses.ANIMATING_CLOSED),n.adapter.notifyClose()},Xe.TRANSITION_CLOSE_DURATION)}),this.isSurfaceOpen=!1,e||this.maybeRestoreFocus()}},t.prototype.handleBodyClick=function(e){var n=e.target;this.adapter.isElementInContainer(n)||this.close()},t.prototype.handleKeydown=function(e){var n=e.keyCode,i=e.key,o=i==="Escape"||n===27;o&&this.close()},t.prototype.autoposition=function(){var e;this.measurements=this.getAutoLayoutmeasurements();var n=this.getoriginCorner(),i=this.getMenuSurfaceMaxHeight(n),o=this.hasBit(n,X.BOTTOM)?"bottom":"top",s=this.hasBit(n,X.RIGHT)?"right":"left",a=this.getHorizontalOriginOffset(n),l=this.getVerticalOriginOffset(n),u=this.measurements,c=u.anchorSize,f=u.surfaceSize,v=(e={},e[s]=a,e[o]=l,e);c.width/f.width>Xe.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO&&(s="center"),(this.isHoistedElement||this.isFixedPosition)&&this.adjustPositionForHoistedElement(v),this.adapter.setTransformOrigin(s+" "+o),this.adapter.setPosition(v),this.adapter.setMaxHeight(i?i+"px":""),this.hasBit(n,X.BOTTOM)||this.adapter.addClass(t.cssClasses.IS_OPEN_BELOW)},t.prototype.getAutoLayoutmeasurements=function(){var e=this.adapter.getAnchorDimensions(),n=this.adapter.getBodyDimensions(),i=this.adapter.getWindowDimensions(),o=this.adapter.getWindowScroll();return e||(e={top:this.position.y,right:this.position.x,bottom:this.position.y,left:this.position.x,width:0,height:0}),{anchorSize:e,bodySize:n,surfaceSize:this.dimensions,viewportDistance:{top:e.top,right:i.width-e.right,bottom:i.height-e.bottom,left:e.left},viewportSize:i,windowScroll:o}},t.prototype.getoriginCorner=function(){var e=this.originCorner,n=this.measurements,i=n.viewportDistance,o=n.anchorSize,s=n.surfaceSize,a=t.numbers.MARGIN_TO_EDGE,l=this.hasBit(this.anchorCorner,X.BOTTOM),u,c;l?(u=i.top-a+this.anchorMargin.bottom,c=i.bottom-a-this.anchorMargin.bottom):(u=i.top-a+this.anchorMargin.top,c=i.bottom-a+o.height-this.anchorMargin.top);var f=c-s.height>0;!f&&u>c+this.openBottomBias&&(e=this.setBit(e,X.BOTTOM));var v=this.adapter.isRtl(),m=this.hasBit(this.anchorCorner,X.FLIP_RTL),b=this.hasBit(this.anchorCorner,X.RIGHT)||this.hasBit(e,X.RIGHT),A=!1;v&&m?A=!b:A=b;var y,T;A?(y=i.left+o.width+this.anchorMargin.right,T=i.right-this.anchorMargin.right):(y=i.left+this.anchorMargin.left,T=i.right+o.width-this.anchorMargin.left);var C=y-s.width>0,_=T-s.width>0,g=this.hasBit(e,X.FLIP_RTL)&&this.hasBit(e,X.RIGHT);return _&&g&&v||!C&&g?e=this.unsetBit(e,X.RIGHT):(C&&A&&v||C&&!A&&b||!_&&y>=T)&&(e=this.setBit(e,X.RIGHT)),e},t.prototype.getMenuSurfaceMaxHeight=function(e){if(this.maxHeight>0)return this.maxHeight;var n=this.measurements.viewportDistance,i=0,o=this.hasBit(e,X.BOTTOM),s=this.hasBit(this.anchorCorner,X.BOTTOM),a=t.numbers.MARGIN_TO_EDGE;return o?(i=n.top+this.anchorMargin.top-a,s||(i+=this.measurements.anchorSize.height)):(i=n.bottom-this.anchorMargin.bottom+this.measurements.anchorSize.height-a,s&&(i-=this.measurements.anchorSize.height)),i},t.prototype.getHorizontalOriginOffset=function(e){var n=this.measurements.anchorSize,i=this.hasBit(e,X.RIGHT),o=this.hasBit(this.anchorCorner,X.RIGHT);if(i){var s=o?n.width-this.anchorMargin.left:this.anchorMargin.right;return this.isHoistedElement||this.isFixedPosition?s-(this.measurements.viewportSize.width-this.measurements.bodySize.width):s}return o?n.width-this.anchorMargin.right:this.anchorMargin.left},t.prototype.getVerticalOriginOffset=function(e){var n=this.measurements.anchorSize,i=this.hasBit(e,X.BOTTOM),o=this.hasBit(this.anchorCorner,X.BOTTOM),s=0;return i?s=o?n.height-this.anchorMargin.top:-this.anchorMargin.bottom:s=o?n.height+this.anchorMargin.bottom:this.anchorMargin.top,s},t.prototype.adjustPositionForHoistedElement=function(e){var n,i,o=this.measurements,s=o.windowScroll,a=o.viewportDistance,l=o.surfaceSize,u=o.viewportSize,c=Object.keys(e);try{for(var f=ae(c),v=f.next();!v.done;v=f.next()){var m=v.value,b=e[m]||0;if(this.isHorizontallyCenteredOnViewport&&(m==="left"||m==="right")){e[m]=(u.width-l.width)/2;continue}b+=a[m],this.isFixedPosition||(m==="top"?b+=s.y:m==="bottom"?b-=s.y:m==="left"?b+=s.x:b-=s.x),e[m]=b}}catch(A){n={error:A}}finally{try{v&&!v.done&&(i=f.return)&&i.call(f)}finally{if(n)throw n.error}}},t.prototype.maybeRestoreFocus=function(){var e=this,n=this.adapter.isFocused(),i=this.adapter.getOwnerDocument?this.adapter.getOwnerDocument():document,o=i.activeElement&&this.adapter.isElementInContainer(i.activeElement);(n||o)&&setTimeout(function(){e.adapter.restoreFocus()},Xe.TOUCH_EVENT_WAIT_MS)},t.prototype.hasBit=function(e,n){return!!(e&n)},t.prototype.setBit=function(e,n){return e|n},t.prototype.unsetBit=function(e,n){return e^n},t.prototype.isFinite=function(e){return typeof e=="number"&&isFinite(e)},t}(ne);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var nn={animation:{prefixed:"-webkit-animation",standard:"animation"},transform:{prefixed:"-webkit-transform",standard:"transform"},transition:{prefixed:"-webkit-transition",standard:"transition"}};function Zi(r){return!!r.document&&typeof r.document.createElement=="function"}function Yi(r,t){if(Zi(r)&&t in nn){var e=r.document.createElement("div"),n=nn[t],i=n.standard,o=n.prefixed,s=i in e.style;return s?i:o}return t}/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Ji=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.initialSyncWithDOM=function(){var e=this,n=this.root.parentElement;this.anchorElement=n&&n.classList.contains(Qe.ANCHOR)?n:null,this.root.classList.contains(Qe.FIXED)&&this.setFixedPosition(!0),this.handleKeydown=function(i){e.foundation.handleKeydown(i)},this.handleBodyClick=function(i){e.foundation.handleBodyClick(i)},this.registerBodyClickListener=function(){document.body.addEventListener("click",e.handleBodyClick,{capture:!0})},this.deregisterBodyClickListener=function(){document.body.removeEventListener("click",e.handleBodyClick,{capture:!0})},this.listen("keydown",this.handleKeydown),this.listen(Ee.OPENED_EVENT,this.registerBodyClickListener),this.listen(Ee.CLOSED_EVENT,this.deregisterBodyClickListener)},t.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown),this.unlisten(Ee.OPENED_EVENT,this.registerBodyClickListener),this.unlisten(Ee.CLOSED_EVENT,this.deregisterBodyClickListener),r.prototype.destroy.call(this)},t.prototype.isOpen=function(){return this.foundation.isOpen()},t.prototype.open=function(){this.foundation.open()},t.prototype.close=function(e){e===void 0&&(e=!1),this.foundation.close(e)},Object.defineProperty(t.prototype,"quickOpen",{set:function(e){this.foundation.setQuickOpen(e)},enumerable:!1,configurable:!0}),t.prototype.setIsHoisted=function(e){this.foundation.setIsHoisted(e)},t.prototype.setMenuSurfaceAnchorElement=function(e){this.anchorElement=e},t.prototype.setFixedPosition=function(e){e?this.root.classList.add(Qe.FIXED):this.root.classList.remove(Qe.FIXED),this.foundation.setFixedPosition(e)},t.prototype.setAbsolutePosition=function(e,n){this.foundation.setAbsolutePosition(e,n),this.setIsHoisted(!0)},t.prototype.setAnchorCorner=function(e){this.foundation.setAnchorCorner(e)},t.prototype.setAnchorMargin=function(e){this.foundation.setAnchorMargin(e)},t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},hasClass:function(i){return e.root.classList.contains(i)},hasAnchor:function(){return!!e.anchorElement},notifyClose:function(){return e.emit(Te.strings.CLOSED_EVENT,{})},notifyClosing:function(){e.emit(Te.strings.CLOSING_EVENT,{})},notifyOpen:function(){return e.emit(Te.strings.OPENED_EVENT,{})},notifyOpening:function(){return e.emit(Te.strings.OPENING_EVENT,{})},isElementInContainer:function(i){return e.root.contains(i)},isRtl:function(){return getComputedStyle(e.root).getPropertyValue("direction")==="rtl"},setTransformOrigin:function(i){var o=Yi(window,"transform")+"-origin";e.root.style.setProperty(o,i)},isFocused:function(){return document.activeElement===e.root},saveFocus:function(){e.previousFocus=document.activeElement},restoreFocus:function(){e.root.contains(document.activeElement)&&e.previousFocus&&e.previousFocus.focus&&e.previousFocus.focus()},getInnerDimensions:function(){return{width:e.root.offsetWidth,height:e.root.offsetHeight}},getAnchorDimensions:function(){return e.anchorElement?e.anchorElement.getBoundingClientRect():null},getWindowDimensions:function(){return{width:window.innerWidth,height:window.innerHeight}},getBodyDimensions:function(){return{width:document.body.clientWidth,height:document.body.clientHeight}},getWindowScroll:function(){return{x:window.pageXOffset,y:window.pageYOffset}},setPosition:function(i){var o=e.root;o.style.left="left"in i?i.left+"px":"",o.style.right="right"in i?i.right+"px":"",o.style.top="top"in i?i.top+"px":"",o.style.bottom="bottom"in i?i.bottom+"px":""},setMaxHeight:function(i){e.root.style.maxHeight=i}};return new Te(n)},t}(re);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var qe={MENU_SELECTED_LIST_ITEM:"mdc-menu-item--selected",MENU_SELECTION_GROUP:"mdc-menu__selection-group",ROOT:"mdc-menu"},me={ARIA_CHECKED_ATTR:"aria-checked",ARIA_DISABLED_ATTR:"aria-disabled",CHECKBOX_SELECTOR:'input[type="checkbox"]',LIST_SELECTOR:".mdc-list,.mdc-deprecated-list",SELECTED_EVENT:"MDCMenu:selected",SKIP_RESTORE_FOCUS:"data-menu-item-skip-restore-focus"},er={FOCUS_ROOT_INDEX:-1},Ge;(function(r){r[r.NONE=0]="NONE",r[r.LIST_ROOT=1]="LIST_ROOT",r[r.FIRST_ITEM=2]="FIRST_ITEM",r[r.LAST_ITEM=3]="LAST_ITEM"})(Ge||(Ge={}));/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var tr=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.closeAnimationEndTimerId=0,n.defaultFocusState=Ge.LIST_ROOT,n.selectedIndex=-1,n}return Object.defineProperty(t,"cssClasses",{get:function(){return qe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return me},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return er},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClassToElementAtIndex:function(){},removeClassFromElementAtIndex:function(){},addAttributeToElementAtIndex:function(){},removeAttributeFromElementAtIndex:function(){},getAttributeFromElementAtIndex:function(){return null},elementContainsClass:function(){return!1},closeSurface:function(){},getElementIndex:function(){return-1},notifySelected:function(){},getMenuItemCount:function(){return 0},focusItemAtIndex:function(){},focusListRoot:function(){},getSelectedSiblingOfItemAtIndex:function(){return-1},isSelectableItemAtIndex:function(){return!1}}},enumerable:!1,configurable:!0}),t.prototype.destroy=function(){this.closeAnimationEndTimerId&&clearTimeout(this.closeAnimationEndTimerId),this.adapter.closeSurface()},t.prototype.handleKeydown=function(e){var n=e.key,i=e.keyCode,o=n==="Tab"||i===9;o&&this.adapter.closeSurface(!0)},t.prototype.handleItemAction=function(e){var n=this,i=this.adapter.getElementIndex(e);if(!(i<0)){this.adapter.notifySelected({index:i});var o=this.adapter.getAttributeFromElementAtIndex(i,me.SKIP_RESTORE_FOCUS)==="true";this.adapter.closeSurface(o),this.closeAnimationEndTimerId=setTimeout(function(){var s=n.adapter.getElementIndex(e);s>=0&&n.adapter.isSelectableItemAtIndex(s)&&n.setSelectedIndex(s)},Te.numbers.TRANSITION_CLOSE_DURATION)}},t.prototype.handleMenuSurfaceOpened=function(){switch(this.defaultFocusState){case Ge.FIRST_ITEM:this.adapter.focusItemAtIndex(0);break;case Ge.LAST_ITEM:this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount()-1);break;case Ge.NONE:break;default:this.adapter.focusListRoot();break}},t.prototype.setDefaultFocusState=function(e){this.defaultFocusState=e},t.prototype.getSelectedIndex=function(){return this.selectedIndex},t.prototype.setSelectedIndex=function(e){if(this.validatedIndex(e),!this.adapter.isSelectableItemAtIndex(e))throw new Error("MDCMenuFoundation: No selection group at specified index.");var n=this.adapter.getSelectedSiblingOfItemAtIndex(e);n>=0&&(this.adapter.removeAttributeFromElementAtIndex(n,me.ARIA_CHECKED_ATTR),this.adapter.removeClassFromElementAtIndex(n,qe.MENU_SELECTED_LIST_ITEM)),this.adapter.addClassToElementAtIndex(e,qe.MENU_SELECTED_LIST_ITEM),this.adapter.addAttributeToElementAtIndex(e,me.ARIA_CHECKED_ATTR,"true"),this.selectedIndex=e},t.prototype.setEnabled=function(e,n){this.validatedIndex(e),n?(this.adapter.removeClassFromElementAtIndex(e,R.LIST_ITEM_DISABLED_CLASS),this.adapter.addAttributeToElementAtIndex(e,me.ARIA_DISABLED_ATTR,"false")):(this.adapter.addClassToElementAtIndex(e,R.LIST_ITEM_DISABLED_CLASS),this.adapter.addAttributeToElementAtIndex(e,me.ARIA_DISABLED_ATTR,"true"))},t.prototype.validatedIndex=function(e){var n=this.adapter.getMenuItemCount(),i=e>=0&&e<n;if(!i)throw new Error("MDCMenuFoundation: No list item at specified index.")},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var nr=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e,n){e===void 0&&(e=function(i){return new Ji(i)}),n===void 0&&(n=function(i){return new Qi(i)}),this.menuSurfaceFactory=e,this.listFactory=n},t.prototype.initialSyncWithDOM=function(){var e=this;this.menuSurface=this.menuSurfaceFactory(this.root);var n=this.root.querySelector(me.LIST_SELECTOR);n?(this.list=this.listFactory(n),this.list.wrapFocus=!0):this.list=null,this.handleKeydown=function(i){e.foundation.handleKeydown(i)},this.handleItemAction=function(i){e.foundation.handleItemAction(e.items[i.detail.index])},this.handleMenuSurfaceOpened=function(){e.foundation.handleMenuSurfaceOpened()},this.menuSurface.listen(Te.strings.OPENED_EVENT,this.handleMenuSurfaceOpened),this.listen("keydown",this.handleKeydown),this.listen(Tt.strings.ACTION_EVENT,this.handleItemAction)},t.prototype.destroy=function(){this.list&&this.list.destroy(),this.menuSurface.destroy(),this.menuSurface.unlisten(Te.strings.OPENED_EVENT,this.handleMenuSurfaceOpened),this.unlisten("keydown",this.handleKeydown),this.unlisten(Tt.strings.ACTION_EVENT,this.handleItemAction),r.prototype.destroy.call(this)},Object.defineProperty(t.prototype,"open",{get:function(){return this.menuSurface.isOpen()},set:function(e){e?this.menuSurface.open():this.menuSurface.close()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wrapFocus",{get:function(){return this.list?this.list.wrapFocus:!1},set:function(e){this.list&&(this.list.wrapFocus=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasTypeahead",{set:function(e){this.list&&(this.list.hasTypeahead=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"typeaheadInProgress",{get:function(){return this.list?this.list.typeaheadInProgress:!1},enumerable:!1,configurable:!0}),t.prototype.typeaheadMatchItem=function(e,n){return this.list?this.list.typeaheadMatchItem(e,n):-1},t.prototype.layout=function(){this.list&&this.list.layout()},Object.defineProperty(t.prototype,"items",{get:function(){return this.list?this.list.listElements:[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"singleSelection",{set:function(e){this.list&&(this.list.singleSelection=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectedIndex",{get:function(){return this.list?this.list.selectedIndex:K.UNSET_INDEX},set:function(e){this.list&&(this.list.selectedIndex=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"quickOpen",{set:function(e){this.menuSurface.quickOpen=e},enumerable:!1,configurable:!0}),t.prototype.setDefaultFocusState=function(e){this.foundation.setDefaultFocusState(e)},t.prototype.setAnchorCorner=function(e){this.menuSurface.setAnchorCorner(e)},t.prototype.setAnchorMargin=function(e){this.menuSurface.setAnchorMargin(e)},t.prototype.setSelectedIndex=function(e){this.foundation.setSelectedIndex(e)},t.prototype.setEnabled=function(e,n){this.foundation.setEnabled(e,n)},t.prototype.getOptionByIndex=function(e){var n=this.items;return e<n.length?this.items[e]:null},t.prototype.getPrimaryTextAtIndex=function(e){var n=this.getOptionByIndex(e);return n&&this.list&&this.list.getPrimaryText(n)||""},t.prototype.setFixedPosition=function(e){this.menuSurface.setFixedPosition(e)},t.prototype.setIsHoisted=function(e){this.menuSurface.setIsHoisted(e)},t.prototype.setAbsolutePosition=function(e,n){this.menuSurface.setAbsolutePosition(e,n)},t.prototype.setAnchorElement=function(e){this.menuSurface.anchorElement=e},t.prototype.getDefaultFoundation=function(){var e=this,n={addClassToElementAtIndex:function(i,o){var s=e.items;s[i].classList.add(o)},removeClassFromElementAtIndex:function(i,o){var s=e.items;s[i].classList.remove(o)},addAttributeToElementAtIndex:function(i,o,s){var a=e.items;a[i].setAttribute(o,s)},removeAttributeFromElementAtIndex:function(i,o){var s=e.items;s[i].removeAttribute(o)},getAttributeFromElementAtIndex:function(i,o){var s=e.items;return s[i].getAttribute(o)},elementContainsClass:function(i,o){return i.classList.contains(o)},closeSurface:function(i){e.menuSurface.close(i)},getElementIndex:function(i){return e.items.indexOf(i)},notifySelected:function(i){e.emit(me.SELECTED_EVENT,{index:i.index,item:e.items[i.index]})},getMenuItemCount:function(){return e.items.length},focusItemAtIndex:function(i){e.items[i].focus()},focusListRoot:function(){e.root.querySelector(me.LIST_SELECTOR).focus()},isSelectableItemAtIndex:function(i){return!!lt(e.items[i],"."+qe.MENU_SELECTION_GROUP)},getSelectedSiblingOfItemAtIndex:function(i){var o=lt(e.items[i],"."+qe.MENU_SELECTION_GROUP),s=o.querySelector("."+qe.MENU_SELECTED_LIST_ITEM);return s?e.items.indexOf(s):-1}};return new tr(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var q={ACTIVATED:"mdc-select--activated",DISABLED:"mdc-select--disabled",FOCUSED:"mdc-select--focused",INVALID:"mdc-select--invalid",MENU_INVALID:"mdc-select__menu--invalid",OUTLINED:"mdc-select--outlined",REQUIRED:"mdc-select--required",ROOT:"mdc-select",WITH_LEADING_ICON:"mdc-select--with-leading-icon"},J={ARIA_CONTROLS:"aria-controls",ARIA_DESCRIBEDBY:"aria-describedby",ARIA_SELECTED_ATTR:"aria-selected",CHANGE_EVENT:"MDCSelect:change",HIDDEN_INPUT_SELECTOR:'input[type="hidden"]',LABEL_SELECTOR:".mdc-floating-label",LEADING_ICON_SELECTOR:".mdc-select__icon",LINE_RIPPLE_SELECTOR:".mdc-line-ripple",MENU_SELECTOR:".mdc-select__menu",OUTLINE_SELECTOR:".mdc-notched-outline",SELECTED_TEXT_SELECTOR:".mdc-select__selected-text",SELECT_ANCHOR_SELECTOR:".mdc-select__anchor",VALUE_ATTR:"data-value"},Ne={LABEL_SCALE:.75,UNSET_INDEX:-1,CLICK_DEBOUNCE_TIMEOUT_MS:330};/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var ir=function(r){B(t,r);function t(e,n){n===void 0&&(n={});var i=r.call(this,x(x({},t.defaultAdapter),e))||this;return i.disabled=!1,i.isMenuOpen=!1,i.useDefaultValidation=!0,i.customValidity=!0,i.lastSelectedIndex=Ne.UNSET_INDEX,i.clickDebounceTimeout=0,i.recentlyClicked=!1,i.leadingIcon=n.leadingIcon,i.helperText=n.helperText,i}return Object.defineProperty(t,"cssClasses",{get:function(){return q},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Ne},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return J},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},activateBottomLine:function(){},deactivateBottomLine:function(){},getSelectedIndex:function(){return-1},setSelectedIndex:function(){},hasLabel:function(){return!1},floatLabel:function(){},getLabelWidth:function(){return 0},setLabelRequired:function(){},hasOutline:function(){return!1},notchOutline:function(){},closeOutline:function(){},setRippleCenter:function(){},notifyChange:function(){},setSelectedText:function(){},isSelectAnchorFocused:function(){return!1},getSelectAnchorAttr:function(){return""},setSelectAnchorAttr:function(){},removeSelectAnchorAttr:function(){},addMenuClass:function(){},removeMenuClass:function(){},openMenu:function(){},closeMenu:function(){},getAnchorElement:function(){return null},setMenuAnchorElement:function(){},setMenuAnchorCorner:function(){},setMenuWrapFocus:function(){},focusMenuItemAtIndex:function(){},getMenuItemCount:function(){return 0},getMenuItemValues:function(){return[]},getMenuItemTextAtIndex:function(){return""},isTypeaheadInProgress:function(){return!1},typeaheadMatchItem:function(){return-1}}},enumerable:!1,configurable:!0}),t.prototype.getSelectedIndex=function(){return this.adapter.getSelectedIndex()},t.prototype.setSelectedIndex=function(e,n,i){n===void 0&&(n=!1),i===void 0&&(i=!1),!(e>=this.adapter.getMenuItemCount())&&(e===Ne.UNSET_INDEX?this.adapter.setSelectedText(""):this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(e).trim()),this.adapter.setSelectedIndex(e),n&&this.adapter.closeMenu(),!i&&this.lastSelectedIndex!==e&&this.handleChange(),this.lastSelectedIndex=e)},t.prototype.setValue=function(e,n){n===void 0&&(n=!1);var i=this.adapter.getMenuItemValues().indexOf(e);this.setSelectedIndex(i,!1,n)},t.prototype.getValue=function(){var e=this.adapter.getSelectedIndex(),n=this.adapter.getMenuItemValues();return e!==Ne.UNSET_INDEX?n[e]:""},t.prototype.getDisabled=function(){return this.disabled},t.prototype.setDisabled=function(e){this.disabled=e,this.disabled?(this.adapter.addClass(q.DISABLED),this.adapter.closeMenu()):this.adapter.removeClass(q.DISABLED),this.leadingIcon&&this.leadingIcon.setDisabled(this.disabled),this.disabled?this.adapter.removeSelectAnchorAttr("tabindex"):this.adapter.setSelectAnchorAttr("tabindex","0"),this.adapter.setSelectAnchorAttr("aria-disabled",this.disabled.toString())},t.prototype.openMenu=function(){this.adapter.addClass(q.ACTIVATED),this.adapter.openMenu(),this.isMenuOpen=!0,this.adapter.setSelectAnchorAttr("aria-expanded","true")},t.prototype.setHelperTextContent=function(e){this.helperText&&this.helperText.setContent(e)},t.prototype.layout=function(){if(this.adapter.hasLabel()){var e=this.getValue().length>0,n=this.adapter.hasClass(q.FOCUSED),i=e||n,o=this.adapter.hasClass(q.REQUIRED);this.notchOutline(i),this.adapter.floatLabel(i),this.adapter.setLabelRequired(o)}},t.prototype.layoutOptions=function(){var e=this.adapter.getMenuItemValues(),n=e.indexOf(this.getValue());this.setSelectedIndex(n,!1,!0)},t.prototype.handleMenuOpened=function(){if(this.adapter.getMenuItemValues().length!==0){var e=this.getSelectedIndex(),n=e>=0?e:0;this.adapter.focusMenuItemAtIndex(n)}},t.prototype.handleMenuClosing=function(){this.adapter.setSelectAnchorAttr("aria-expanded","false")},t.prototype.handleMenuClosed=function(){this.adapter.removeClass(q.ACTIVATED),this.isMenuOpen=!1,this.adapter.isSelectAnchorFocused()||this.blur()},t.prototype.handleChange=function(){this.layout(),this.adapter.notifyChange(this.getValue());var e=this.adapter.hasClass(q.REQUIRED);e&&this.useDefaultValidation&&this.setValid(this.isValid())},t.prototype.handleMenuItemAction=function(e){this.setSelectedIndex(e,!0)},t.prototype.handleFocus=function(){this.adapter.addClass(q.FOCUSED),this.layout(),this.adapter.activateBottomLine()},t.prototype.handleBlur=function(){this.isMenuOpen||this.blur()},t.prototype.handleClick=function(e){if(!(this.disabled||this.recentlyClicked)){if(this.setClickDebounceTimeout(),this.isMenuOpen){this.adapter.closeMenu();return}this.adapter.setRippleCenter(e),this.openMenu()}},t.prototype.handleKeydown=function(e){if(!(this.isMenuOpen||!this.adapter.hasClass(q.FOCUSED))){var n=z(e)===F.ENTER,i=z(e)===F.SPACEBAR,o=z(e)===F.ARROW_UP,s=z(e)===F.ARROW_DOWN,a=e.ctrlKey||e.metaKey;if(!a&&(!i&&e.key&&e.key.length===1||i&&this.adapter.isTypeaheadInProgress())){var l=i?" ":e.key,u=this.adapter.typeaheadMatchItem(l,this.getSelectedIndex());u>=0&&this.setSelectedIndex(u),e.preventDefault();return}!n&&!i&&!o&&!s||(this.openMenu(),e.preventDefault())}},t.prototype.notchOutline=function(e){if(this.adapter.hasOutline()){var n=this.adapter.hasClass(q.FOCUSED);if(e){var i=Ne.LABEL_SCALE,o=this.adapter.getLabelWidth()*i;this.adapter.notchOutline(o)}else n||this.adapter.closeOutline()}},t.prototype.setLeadingIconAriaLabel=function(e){this.leadingIcon&&this.leadingIcon.setAriaLabel(e)},t.prototype.setLeadingIconContent=function(e){this.leadingIcon&&this.leadingIcon.setContent(e)},t.prototype.getUseDefaultValidation=function(){return this.useDefaultValidation},t.prototype.setUseDefaultValidation=function(e){this.useDefaultValidation=e},t.prototype.setValid=function(e){this.useDefaultValidation||(this.customValidity=e),this.adapter.setSelectAnchorAttr("aria-invalid",(!e).toString()),e?(this.adapter.removeClass(q.INVALID),this.adapter.removeMenuClass(q.MENU_INVALID)):(this.adapter.addClass(q.INVALID),this.adapter.addMenuClass(q.MENU_INVALID)),this.syncHelperTextValidity(e)},t.prototype.isValid=function(){return this.useDefaultValidation&&this.adapter.hasClass(q.REQUIRED)&&!this.adapter.hasClass(q.DISABLED)?this.getSelectedIndex()!==Ne.UNSET_INDEX&&(this.getSelectedIndex()!==0||!!this.getValue()):this.customValidity},t.prototype.setRequired=function(e){e?this.adapter.addClass(q.REQUIRED):this.adapter.removeClass(q.REQUIRED),this.adapter.setSelectAnchorAttr("aria-required",e.toString()),this.adapter.setLabelRequired(e)},t.prototype.getRequired=function(){return this.adapter.getSelectAnchorAttr("aria-required")==="true"},t.prototype.init=function(){var e=this.adapter.getAnchorElement();e&&(this.adapter.setMenuAnchorElement(e),this.adapter.setMenuAnchorCorner(je.BOTTOM_START)),this.adapter.setMenuWrapFocus(!1),this.setDisabled(this.adapter.hasClass(q.DISABLED)),this.syncHelperTextValidity(!this.adapter.hasClass(q.INVALID)),this.layout(),this.layoutOptions()},t.prototype.blur=function(){this.adapter.removeClass(q.FOCUSED),this.layout(),this.adapter.deactivateBottomLine();var e=this.adapter.hasClass(q.REQUIRED);e&&this.useDefaultValidation&&this.setValid(this.isValid())},t.prototype.syncHelperTextValidity=function(e){if(this.helperText){this.helperText.setValidity(e);var n=this.helperText.isVisible(),i=this.helperText.getId();n&&i?this.adapter.setSelectAnchorAttr(J.ARIA_DESCRIBEDBY,i):this.adapter.removeSelectAnchorAttr(J.ARIA_DESCRIBEDBY)}},t.prototype.setClickDebounceTimeout=function(){var e=this;clearTimeout(this.clickDebounceTimeout),this.clickDebounceTimeout=setTimeout(function(){e.recentlyClicked=!1},Ne.CLICK_DEBOUNCE_TIMEOUT_MS),this.recentlyClicked=!0},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var Pe={ARIA_HIDDEN:"aria-hidden",ROLE:"role"},ye={HELPER_TEXT_VALIDATION_MSG:"mdc-select-helper-text--validation-msg",HELPER_TEXT_VALIDATION_MSG_PERSISTENT:"mdc-select-helper-text--validation-msg-persistent"};/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var rr=function(r){B(t,r);function t(e){return r.call(this,x(x({},t.defaultAdapter),e))||this}return Object.defineProperty(t,"cssClasses",{get:function(){return ye},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return Pe},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setAttr:function(){},getAttr:function(){return null},removeAttr:function(){},setContent:function(){}}},enumerable:!1,configurable:!0}),t.prototype.getId=function(){return this.adapter.getAttr("id")},t.prototype.isVisible=function(){return this.adapter.getAttr(Pe.ARIA_HIDDEN)!=="true"},t.prototype.setContent=function(e){this.adapter.setContent(e)},t.prototype.setValidation=function(e){e?this.adapter.addClass(ye.HELPER_TEXT_VALIDATION_MSG):this.adapter.removeClass(ye.HELPER_TEXT_VALIDATION_MSG)},t.prototype.setValidationMsgPersistent=function(e){e?this.adapter.addClass(ye.HELPER_TEXT_VALIDATION_MSG_PERSISTENT):this.adapter.removeClass(ye.HELPER_TEXT_VALIDATION_MSG_PERSISTENT)},t.prototype.getIsValidation=function(){return this.adapter.hasClass(ye.HELPER_TEXT_VALIDATION_MSG)},t.prototype.getIsValidationMsgPersistent=function(){return this.adapter.hasClass(ye.HELPER_TEXT_VALIDATION_MSG_PERSISTENT)},t.prototype.setValidity=function(e){var n=this.adapter.hasClass(ye.HELPER_TEXT_VALIDATION_MSG);if(n){var i=this.adapter.hasClass(ye.HELPER_TEXT_VALIDATION_MSG_PERSISTENT),o=!e||i;if(o){this.showToScreenReader(),e?this.adapter.removeAttr(Pe.ROLE):this.adapter.setAttr(Pe.ROLE,"alert");return}this.adapter.removeAttr(Pe.ROLE),this.hide()}},t.prototype.showToScreenReader=function(){this.adapter.removeAttr(Pe.ARIA_HIDDEN)},t.prototype.hide=function(){this.adapter.setAttr(Pe.ARIA_HIDDEN,"true")},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var or=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"foundationForSelect",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),t.prototype.getDefaultFoundation=function(){var e=this,n={addClass:function(i){return e.root.classList.add(i)},removeClass:function(i){return e.root.classList.remove(i)},hasClass:function(i){return e.root.classList.contains(i)},getAttr:function(i){return e.root.getAttribute(i)},setAttr:function(i,o){return e.root.setAttribute(i,o)},removeAttr:function(i){return e.root.removeAttribute(i)},setContent:function(i){e.root.textContent=i}};return new rr(n)},t}(re);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var rn={ICON_EVENT:"MDCSelect:icon",ICON_ROLE:"button"};/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var on=["click","keydown"],sn=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.savedTabIndex=null,n.interactionHandler=function(i){n.handleInteraction(i)},n}return Object.defineProperty(t,"strings",{get:function(){return rn},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){},notifyIconAction:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){var e,n;this.savedTabIndex=this.adapter.getAttr("tabindex");try{for(var i=ae(on),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.registerInteractionHandler(s,this.interactionHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.destroy=function(){var e,n;try{for(var i=ae(on),o=i.next();!o.done;o=i.next()){var s=o.value;this.adapter.deregisterInteractionHandler(s,this.interactionHandler)}}catch(a){e={error:a}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.setDisabled=function(e){this.savedTabIndex&&(e?(this.adapter.setAttr("tabindex","-1"),this.adapter.removeAttr("role")):(this.adapter.setAttr("tabindex",this.savedTabIndex),this.adapter.setAttr("role",rn.ICON_ROLE)))},t.prototype.setAriaLabel=function(e){this.adapter.setAttr("aria-label",e)},t.prototype.setContent=function(e){this.adapter.setContent(e)},t.prototype.handleInteraction=function(e){var n=e.key==="Enter"||e.keyCode===13;(e.type==="click"||n)&&this.adapter.notifyIconAction()},t}(ne);/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var sr=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"foundationForSelect",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),t.prototype.getDefaultFoundation=function(){var e=this,n={getAttr:function(i){return e.root.getAttribute(i)},setAttr:function(i,o){return e.root.setAttribute(i,o)},removeAttr:function(i){return e.root.removeAttribute(i)},setContent:function(i){e.root.textContent=i},registerInteractionHandler:function(i,o){return e.listen(i,o)},deregisterInteractionHandler:function(i,o){return e.unlisten(i,o)},notifyIconAction:function(){return e.emit(sn.strings.ICON_EVENT,{},!0)}};return new sn(n)},t}(re);/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var ar=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e,n,i,o,s,a){if(e===void 0&&(e=function(m){return new $n(m)}),n===void 0&&(n=function(m){return new jn(m)}),i===void 0&&(i=function(m){return new Wn(m)}),o===void 0&&(o=function(m){return new nr(m)}),s===void 0&&(s=function(m){return new sr(m)}),a===void 0&&(a=function(m){return new or(m)}),this.selectAnchor=this.root.querySelector(J.SELECT_ANCHOR_SELECTOR),this.selectedText=this.root.querySelector(J.SELECTED_TEXT_SELECTOR),this.hiddenInput=this.root.querySelector(J.HIDDEN_INPUT_SELECTOR),!this.selectedText)throw new Error("MDCSelect: Missing required element: The following selector must be present: "+("'"+J.SELECTED_TEXT_SELECTOR+"'"));if(this.selectAnchor.hasAttribute(J.ARIA_CONTROLS)){var l=document.getElementById(this.selectAnchor.getAttribute(J.ARIA_CONTROLS));l&&(this.helperText=a(l))}this.menuSetup(o);var u=this.root.querySelector(J.LABEL_SELECTOR);this.label=u?e(u):null;var c=this.root.querySelector(J.LINE_RIPPLE_SELECTOR);this.lineRipple=c?n(c):null;var f=this.root.querySelector(J.OUTLINE_SELECTOR);this.outline=f?i(f):null;var v=this.root.querySelector(J.LEADING_ICON_SELECTOR);v&&(this.leadingIcon=s(v)),this.root.classList.contains(q.OUTLINED)||(this.ripple=this.createRipple())},t.prototype.initialSyncWithDOM=function(){var e=this;if(this.handleFocus=function(){e.foundation.handleFocus()},this.handleBlur=function(){e.foundation.handleBlur()},this.handleClick=function(n){e.selectAnchor.focus(),e.foundation.handleClick(e.getNormalizedXCoordinate(n))},this.handleKeydown=function(n){e.foundation.handleKeydown(n)},this.handleMenuItemAction=function(n){e.foundation.handleMenuItemAction(n.detail.index)},this.handleMenuOpened=function(){e.foundation.handleMenuOpened()},this.handleMenuClosed=function(){e.foundation.handleMenuClosed()},this.handleMenuClosing=function(){e.foundation.handleMenuClosing()},this.selectAnchor.addEventListener("focus",this.handleFocus),this.selectAnchor.addEventListener("blur",this.handleBlur),this.selectAnchor.addEventListener("click",this.handleClick),this.selectAnchor.addEventListener("keydown",this.handleKeydown),this.menu.listen(Ee.CLOSED_EVENT,this.handleMenuClosed),this.menu.listen(Ee.CLOSING_EVENT,this.handleMenuClosing),this.menu.listen(Ee.OPENED_EVENT,this.handleMenuOpened),this.menu.listen(me.SELECTED_EVENT,this.handleMenuItemAction),this.hiddenInput){if(this.hiddenInput.value){this.foundation.setValue(this.hiddenInput.value,!0),this.foundation.layout();return}this.hiddenInput.value=this.value}},t.prototype.destroy=function(){this.selectAnchor.removeEventListener("focus",this.handleFocus),this.selectAnchor.removeEventListener("blur",this.handleBlur),this.selectAnchor.removeEventListener("keydown",this.handleKeydown),this.selectAnchor.removeEventListener("click",this.handleClick),this.menu.unlisten(Ee.CLOSED_EVENT,this.handleMenuClosed),this.menu.unlisten(Ee.OPENED_EVENT,this.handleMenuOpened),this.menu.unlisten(me.SELECTED_EVENT,this.handleMenuItemAction),this.menu.destroy(),this.ripple&&this.ripple.destroy(),this.outline&&this.outline.destroy(),this.leadingIcon&&this.leadingIcon.destroy(),this.helperText&&this.helperText.destroy(),r.prototype.destroy.call(this)},Object.defineProperty(t.prototype,"value",{get:function(){return this.foundation.getValue()},set:function(e){this.foundation.setValue(e)},enumerable:!1,configurable:!0}),t.prototype.setValue=function(e,n){n===void 0&&(n=!1),this.foundation.setValue(e,n)},Object.defineProperty(t.prototype,"selectedIndex",{get:function(){return this.foundation.getSelectedIndex()},set:function(e){this.foundation.setSelectedIndex(e,!0)},enumerable:!1,configurable:!0}),t.prototype.setSelectedIndex=function(e,n){n===void 0&&(n=!1),this.foundation.setSelectedIndex(e,!0,n)},Object.defineProperty(t.prototype,"disabled",{get:function(){return this.foundation.getDisabled()},set:function(e){this.foundation.setDisabled(e),this.hiddenInput&&(this.hiddenInput.disabled=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leadingIconAriaLabel",{set:function(e){this.foundation.setLeadingIconAriaLabel(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leadingIconContent",{set:function(e){this.foundation.setLeadingIconContent(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"helperTextContent",{set:function(e){this.foundation.setHelperTextContent(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"useDefaultValidation",{set:function(e){this.foundation.setUseDefaultValidation(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"valid",{get:function(){return this.foundation.isValid()},set:function(e){this.foundation.setValid(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"required",{get:function(){return this.foundation.getRequired()},set:function(e){this.foundation.setRequired(e)},enumerable:!1,configurable:!0}),t.prototype.layout=function(){this.foundation.layout()},t.prototype.layoutOptions=function(){this.foundation.layoutOptions(),this.menu.layout(),this.menuItemValues=this.menu.items.map(function(e){return e.getAttribute(J.VALUE_ATTR)||""}),this.hiddenInput&&(this.hiddenInput.value=this.value)},t.prototype.getDefaultFoundation=function(){var e=x(x(x(x({},this.getSelectAdapterMethods()),this.getCommonAdapterMethods()),this.getOutlineAdapterMethods()),this.getLabelAdapterMethods());return new ir(e,this.getFoundationMap())},t.prototype.menuSetup=function(e){this.menuElement=this.root.querySelector(J.MENU_SELECTOR),this.menu=e(this.menuElement),this.menu.hasTypeahead=!0,this.menu.singleSelection=!0,this.menuItemValues=this.menu.items.map(function(n){return n.getAttribute(J.VALUE_ATTR)||""})},t.prototype.createRipple=function(){var e=this,n=x(x({},Oe.createAdapter({root:this.selectAnchor})),{registerInteractionHandler:function(i,o){e.selectAnchor.addEventListener(i,o)},deregisterInteractionHandler:function(i,o){e.selectAnchor.removeEventListener(i,o)}});return new Oe(this.selectAnchor,new Mt(n))},t.prototype.getSelectAdapterMethods=function(){var e=this;return{getMenuItemAttr:function(n,i){return n.getAttribute(i)},setSelectedText:function(n){e.selectedText.textContent=n},isSelectAnchorFocused:function(){return document.activeElement===e.selectAnchor},getSelectAnchorAttr:function(n){return e.selectAnchor.getAttribute(n)},setSelectAnchorAttr:function(n,i){e.selectAnchor.setAttribute(n,i)},removeSelectAnchorAttr:function(n){e.selectAnchor.removeAttribute(n)},addMenuClass:function(n){e.menuElement.classList.add(n)},removeMenuClass:function(n){e.menuElement.classList.remove(n)},openMenu:function(){e.menu.open=!0},closeMenu:function(){e.menu.open=!1},getAnchorElement:function(){return e.root.querySelector(J.SELECT_ANCHOR_SELECTOR)},setMenuAnchorElement:function(n){e.menu.setAnchorElement(n)},setMenuAnchorCorner:function(n){e.menu.setAnchorCorner(n)},setMenuWrapFocus:function(n){e.menu.wrapFocus=n},getSelectedIndex:function(){var n=e.menu.selectedIndex;return n instanceof Array?n[0]:n},setSelectedIndex:function(n){e.menu.selectedIndex=n},focusMenuItemAtIndex:function(n){e.menu.items[n].focus()},getMenuItemCount:function(){return e.menu.items.length},getMenuItemValues:function(){return e.menuItemValues},getMenuItemTextAtIndex:function(n){return e.menu.getPrimaryTextAtIndex(n)},isTypeaheadInProgress:function(){return e.menu.typeaheadInProgress},typeaheadMatchItem:function(n,i){return e.menu.typeaheadMatchItem(n,i)}}},t.prototype.getCommonAdapterMethods=function(){var e=this;return{addClass:function(n){e.root.classList.add(n)},removeClass:function(n){e.root.classList.remove(n)},hasClass:function(n){return e.root.classList.contains(n)},setRippleCenter:function(n){e.lineRipple&&e.lineRipple.setRippleCenter(n)},activateBottomLine:function(){e.lineRipple&&e.lineRipple.activate()},deactivateBottomLine:function(){e.lineRipple&&e.lineRipple.deactivate()},notifyChange:function(n){e.hiddenInput&&(e.hiddenInput.value=n);var i=e.selectedIndex;e.emit(J.CHANGE_EVENT,{value:n,index:i},!0)}}},t.prototype.getOutlineAdapterMethods=function(){var e=this;return{hasOutline:function(){return!!e.outline},notchOutline:function(n){e.outline&&e.outline.notch(n)},closeOutline:function(){e.outline&&e.outline.closeNotch()}}},t.prototype.getLabelAdapterMethods=function(){var e=this;return{hasLabel:function(){return!!e.label},floatLabel:function(n){e.label&&e.label.float(n)},getLabelWidth:function(){return e.label?e.label.getWidth():0},setLabelRequired:function(n){e.label&&e.label.setRequired(n)}}},t.prototype.getNormalizedXCoordinate=function(e){var n=e.target.getBoundingClientRect(),i=this.isTouchEvent(e)?e.touches[0].clientX:e.clientX;return i-n.left},t.prototype.isTouchEvent=function(e){return!!e.touches},t.prototype.getFoundationMap=function(){return{helperText:this.helperText?this.helperText.foundationForSelect:void 0,leadingIcon:this.leadingIcon?this.leadingIcon.foundationForSelect:void 0}},t}(re);function an(r,t,e){const n=r.slice();return n[6]=t[e],n}function ln(r){let t,e,n,i,o=r[6]+"",s,a,l,u,c;return{c(){t=I("li"),e=I("span"),n=L(),i=I("span"),s=W(o),a=L(),p(e,"class","mdc-list-item__ripple"),p(i,"class","mdc-list-item__text"),p(t,"class",l=`mdc-list-item ${r[6]==r[0]?"mdc-list-item--selected":""}`),p(t,"aria-selected",u=r[6]==r[0]),p(t,"data-value",c=r[6]),p(t,"role","menuitem")},m(f,v){w(f,t,v),d(t,e),d(t,n),d(t,i),d(i,s),d(t,a)},p(f,v){v&2&&o!==(o=f[6]+"")&&Q(s,o),v&3&&l!==(l=`mdc-list-item ${f[6]==f[0]?"mdc-list-item--selected":""}`)&&p(t,"class",l),v&3&&u!==(u=f[6]==f[0])&&p(t,"aria-selected",u),v&2&&c!==(c=f[6])&&p(t,"data-value",c)},d(f){f&&M(t)}}}function lr(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A,y,T,C=r[1],_=[];for(let g=0;g<C.length;g+=1)_[g]=ln(an(r,C,g));return{c(){t=I("div"),e=I("div"),n=I("span"),i=I("span"),o=L(),s=I("span"),a=I("span"),l=W(r[2]),u=L(),c=I("span"),f=L(),v=I("span"),v.innerHTML='<span id="demo-selected-text" class="mdc-select__selected-text"></span>',m=L(),b=I("span"),b.innerHTML='<svg class="mdc-select__dropdown-icon-graphic" viewBox="7 10 10 5" focusable="false"><polygon class="mdc-select__dropdown-icon-inactive" stroke="none" fill-rule="evenodd" points="7 10 12 15 17 10"></polygon><polygon class="mdc-select__dropdown-icon-active" stroke="none" fill-rule="evenodd" points="7 15 12 10 17 15"></polygon></svg>',A=L(),y=I("div"),T=I("ul");for(let g=0;g<_.length;g+=1)_[g].c();p(i,"class","mdc-notched-outline__leading"),p(a,"id",r[2]),p(a,"class","mdc-floating-label"),p(s,"class","mdc-notched-outline__notch"),p(c,"class","mdc-notched-outline__trailing"),p(n,"class","mdc-notched-outline"),p(v,"class","mdc-select__selected-text-container"),p(b,"class","mdc-select__dropdown-icon"),p(e,"class","mdc-select__anchor"),p(e,"aria-labelledby",r[2]),p(T,"class","mdc-list"),p(T,"role","menu"),p(T,"aria-hidden","true"),p(T,"aria-orientation","vertical"),p(T,"tabindex","-1"),p(y,"class","mdc-select__menu mdc-menu mdc-menu-surface mdc-menu-surface--fullwidth"),p(t,"class","mdc-select mdc-select--outlined"),p(t,"id",r[3])},m(g,E){w(g,t,E),d(t,e),d(e,n),d(n,i),d(n,o),d(n,s),d(s,a),d(a,l),d(n,u),d(n,c),d(e,f),d(e,v),d(e,m),d(e,b),d(t,A),d(t,y),d(y,T);for(let h=0;h<_.length;h+=1)_[h]&&_[h].m(T,null)},p(g,[E]){if(E&4&&Q(l,g[2]),E&4&&p(a,"id",g[2]),E&4&&p(e,"aria-labelledby",g[2]),E&3){C=g[1];let h;for(h=0;h<C.length;h+=1){const S=an(g,C,h);_[h]?_[h].p(S,E):(_[h]=ln(S),_[h].c(),_[h].m(T,null))}for(;h<_.length;h+=1)_[h].d(1);_.length=C.length}E&8&&p(t,"id",g[3])},i:N,o:N,d(g){g&&M(t),dt(_,g)}}}function ur(r,t,e){let{options:n=[]}=t,{label:i=""}=t,{id:o=""}=t,{selectedId:s=null}=t;const a=xe();function l(u){a("valueChanged",{selectedOption:u})}return Re(()=>{new ar(document.querySelector(`#${o}.mdc-select`)).listen("MDCSelect:change",c=>{e(0,s=c.detail.value),l(s)})}),r.$$set=u=>{"options"in u&&e(1,n=u.options),"label"in u&&e(2,i=u.label),"id"in u&&e(3,o=u.id),"selectedId"in u&&e(0,s=u.selectedId)},[s,n,i,o]}class Lt extends fe{constructor(t){super(),de(this,t,ur,lr,ee,{options:1,label:2,id:3,selectedId:0})}}async function wt(r,t=5e3,e=n=>Yn(n)){let n;const i=new AbortController;setTimeout(()=>i.abort(),t);try{n=await fetch(r,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});const o=await n.json();if(!n.ok)throw new Error(`Fetch Get Call Failed for ${r}, response: ${n.statusText}`);return o}catch(o){e(o)}}async function Ft(r,t,e=!0,n=5e3,i=o=>Yn(o)){let o;const s=new AbortController;setTimeout(()=>s.abort(),n);try{if(o=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)}),!o.ok)throw new Error(`Fetch Post Call Failed for ${r}, response: ${o.statusText}`);return e?await o.json():o.ok}catch(a){i(a)}}function Yn(r){throw new Error(`Error during fetch operation: ${r}`)}const Jn="https://frontend-take-home-service.fetch.com";async function cr(r,t){let e={name:r,email:t},n=Jn+"/auth/login";return await Ft(n,e,!1)}async function dr(){let r=Jn+"/auth/logout";try{let t=await fetch(r,{method:"POST",credentials:"include"});if(!t.ok)throw new Error(`Fetch Post Call Failed for ${r}, response: ${t.statusText}`);return t.ok}catch(t){console.log(t)}}const et="https://frontend-take-home-service.fetch.com";async function fr(){let r=et+"/dogs/breeds";return await wt(r)}async function hr(r,t,e,n,i,o,s,a){let l=et+"/dogs/search?";return l+=r?`breeds=${r}`:"",l+=t?`&zipCodes=${t}`:"",l+=e?`&ageMin=${e}`:"",l+=n?`&ageMax=${n}`:"",l+=i?`&size=${i}`:"",l+=o?`&from=${o}`:"",l+=s&&a?`&sort=${s}:${a}`:"",await wt(l)}async function Ot(r){let t=et+"/dogs";return await Ft(t,r)}async function pr(r){let t=et+r;return await wt(t)}async function mr(r){let t=et+"/dogs/match";return await Ft(t,r)}function gr(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A,y,T;return a=new At({props:{id:"name",label:"Name"}}),a.$on("valueChanged",r[0]),u=new At({props:{id:"email",label:"Email"}}),u.$on("valueChanged",r[1]),v=new Je({props:{label:"Login"}}),{c(){t=I("main"),e=I("div"),n=I("h1"),n.textContent="Fetch Finder",i=L(),o=I("form"),s=I("div"),j(a.$$.fragment),l=L(),j(u.$$.fragment),c=L(),f=I("div"),j(v.$$.fragment),m=L(),b=I("div"),p(s,"class","card"),p(f,"class","card"),p(o,"method","get"),p(t,"id","login")},m(C,_){w(C,t,_),d(t,e),d(e,n),d(e,i),d(e,o),d(o,s),V(a,s,null),d(s,l),V(u,s,null),d(o,c),d(o,f),V(v,f,null),d(e,m),d(e,b),A=!0,y||(T=Ke(o,"submit",oi(r[2])),y=!0)},p:N,i(C){A||(O(a.$$.fragment,C),O(u.$$.fragment,C),O(v.$$.fragment,C),A=!0)},o(C){D(a.$$.fragment,C),D(u.$$.fragment,C),D(v.$$.fragment,C),A=!1},d(C){C&&M(t),G(a),G(u),G(v),y=!1,T()}}}function vr(r){let t="",e="";function n(s){t=s.detail.value}function i(s){e=s.detail.value}document.addEventListener("keydown",function(s){s.key==="Enter"&&o()});async function o(){let s=!1;try{let a=cr(t,e).then(l=>{window.location.href="/#/Browse",s=!0})}catch{console.log(`Login failed for ${t}, ${e}`)}}return[n,i,o]}class un extends fe{constructor(t){super(),de(this,t,vr,gr,ee,{})}}function ei(){var t;let r=localStorage.getItem("fetch-favorites");return r&&r!="null"&&((t=r==null?void 0:r.trim())==null?void 0:t.length)>0?r.split(","):[]}function ut(r){localStorage.setItem("fetch-favorites",r.toString())}function Er(r){let t=r.substring(r.indexOf("?"),r.length);const e=new URLSearchParams(t),n={};for(const[i,o]of e.entries())n[i]=o;return n}const Ir=r=>({}),cn=r=>({});function br(r){let t;return{c(){t=I("span"),t.textContent="favorite_border",p(t,"class","material-icons-outlined")},m(e,n){w(e,t,n)},d(e){e&&M(t)}}}function yr(r){let t;return{c(){t=I("span"),t.textContent="favorite",p(t,"class","material-icons-outlined")},m(e,n){w(e,t,n)},d(e){e&&M(t)}}}function Cr(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A,y,T;function C(S,P){return S[0]?yr:br}let _=C(r),g=_(r);const E=r[6].descriptionSlot,h=Tn(E,r,r[5],cn);return{c(){t=I("div"),e=I("div"),n=I("div"),i=I("div"),o=I("img"),a=L(),l=I("div"),u=I("h3"),c=W(r[1]),f=L(),g.c(),v=L(),h&&h.c(),m=L(),b=I("div"),p(o,"class","mdc-card__img"),kt(o.src,s=r[2])||p(o,"src",s),p(i,"class","mdc-card__media-content"),p(n,"class","mdc-card__media mdc-card__media--square"),p(b,"class","mdc-card__ripple"),p(e,"class","mdc-card__primary-action"),p(t,"class","mdc-card mdc-card--outlined"),p(t,"id",r[3])},m(S,P){w(S,t,P),d(t,e),d(e,n),d(n,i),d(i,o),d(e,a),d(e,l),d(l,u),d(u,c),d(u,f),g.m(u,null),d(e,v),h&&h.m(e,null),d(e,m),d(e,b),A=!0,y||(T=Ke(t,"click",r[4]),y=!0)},p(S,[P]){(!A||P&4&&!kt(o.src,s=S[2]))&&p(o,"src",s),(!A||P&2)&&Q(c,S[1]),_!==(_=C(S))&&(g.d(1),g=_(S),g&&(g.c(),g.m(u,null))),h&&h.p&&(!A||P&32)&&Dn(h,E,S,S[5],A?On(E,S[5],P,Ir):Rn(S[5]),cn),(!A||P&8)&&p(t,"id",S[3])},i(S){A||(O(h,S),A=!0)},o(S){D(h,S),A=!1},d(S){S&&M(t),g.d(),h&&h.d(S),y=!1,T()}}}function _r(r,t,e){let{$$slots:n={},$$scope:i}=t,{title:o=""}=t,{imgSrc:s=null}=t,{id:a=null}=t,{favorite:l=!1}=t;const u=xe();function c(f){e(0,l=!l),u("favorited",{id:a,favorite:l})}return Re(()=>{const f=".mdc-button, .mdc-icon-button, .mdc-card__primary-action";[].map.call(document.querySelectorAll(f),function(v){return new Oe(v)})}),r.$$set=f=>{"title"in f&&e(1,o=f.title),"imgSrc"in f&&e(2,s=f.imgSrc),"id"in f&&e(3,a=f.id),"favorite"in f&&e(0,l=f.favorite),"$$scope"in f&&e(5,i=f.$$scope)},[l,o,s,a,c,i,n]}class Nt extends fe{constructor(t){super(),de(this,t,_r,Cr,ee,{title:1,imgSrc:2,id:3,favorite:0})}}function Ar(r){let t,e,n,i,o,s,a,l,u,c,f;return{c(){t=I("div"),e=I("a"),n=I("span"),i=L(),o=I("span"),s=L(),a=I("span"),l=W(r[0]),p(n,"class","mdc-button__ripple"),p(o,"class","mdc-button__touch"),p(a,"class","mdc-button__label"),p(e,"href",r[1]),p(e,"class",u=`fc-button mdc-button mdc-button--touch ${r[2]}`),p(t,"class","mdc-touch-target-wrapper")},m(v,m){w(v,t,m),d(t,e),d(e,n),d(e,i),d(e,o),d(e,s),d(e,a),d(a,l),c||(f=Ke(e,"click",r[3]),c=!0)},p(v,[m]){m&1&&Q(l,v[0]),m&2&&p(e,"href",v[1]),m&4&&u!==(u=`fc-button mdc-button mdc-button--touch ${v[2]}`)&&p(e,"class",u)},i:N,o:N,d(v){v&&M(t),c=!1,f()}}}function Sr(r,t,e){let{label:n=""}=t,{disabled:i=!1}=t,{href:o=""}=t,{theme:s="mdc-button--raised"}=t;const a=xe();function l(u){a("click",{buttonElement:u.currentTarget})}return Re(()=>{new Oe(document.querySelector(".mdc-button"))}),r.$$set=u=>{"label"in u&&e(0,n=u.label),"disabled"in u&&e(4,i=u.disabled),"href"in u&&e(1,o=u.href),"theme"in u&&e(2,s=u.theme)},[n,o,s,l,i]}class gt extends fe{constructor(t){super(),de(this,t,Sr,Ar,ee,{label:0,disabled:4,href:1,theme:2})}}function dn(r,t,e){const n=r.slice();return n[7]=t[e],n[9]=e,n}function fn(r){let t,e,n,i,o,s,a,l=r[7].label+"",u,c,f,v,m,b,A,y,T,C,_;return{c(){t=I("div"),e=I("button"),n=I("span"),i=L(),o=I("span"),s=L(),a=I("span"),u=W(l),c=L(),f=I("span"),v=W("arrow_upward"),T=L(),p(n,"class","mdc-button__ripple"),p(o,"class","mdc-button__touch"),p(f,"class",m=`material-symbols-outlined ${r[3]?"":"flipped"} ${r[7].id==r[0]?"visible":""}`),p(a,"class","mdc-button__label"),p(e,"id",b=r[7].id),p(e,"aria-label",A=`${r[1]}: ${r[7].label}`),p(e,"class",y=`fc-button mdc-button  mdc-button--touch mdc-button--large ${r[7].id==r[0]?"btn__toggle-group--selected":""}  ${r[7].id==r[0]?"mdc-button--raised":"mdc-button--outlined"}`),p(t,"class","mdc-touch-target-wrapper")},m(g,E){w(g,t,E),d(t,e),d(e,n),d(e,i),d(e,o),d(e,s),d(e,a),d(a,u),d(a,c),d(a,f),d(f,v),d(t,T),C||(_=Ke(e,"click",r[4]),C=!0)},p(g,E){E&4&&l!==(l=g[7].label+"")&&Q(u,l),E&13&&m!==(m=`material-symbols-outlined ${g[3]?"":"flipped"} ${g[7].id==g[0]?"visible":""}`)&&p(f,"class",m),E&4&&b!==(b=g[7].id)&&p(e,"id",b),E&6&&A!==(A=`${g[1]}: ${g[7].label}`)&&p(e,"aria-label",A),E&5&&y!==(y=`fc-button mdc-button  mdc-button--touch mdc-button--large ${g[7].id==g[0]?"btn__toggle-group--selected":""}  ${g[7].id==g[0]?"mdc-button--raised":"mdc-button--outlined"}`)&&p(e,"class",y)},d(g){g&&M(t),C=!1,_()}}}function Tr(r){let t,e,n,i,o,s,a=r[2],l=[];for(let u=0;u<a.length;u+=1)l[u]=fn(dn(r,a,u));return{c(){t=I("div"),e=I("div"),n=I("h3"),i=W(r[1]),o=L(),s=I("div");for(let u=0;u<l.length;u+=1)l[u].c();p(e,"class","form--label"),p(e,"id","toggleBtnLabel"),p(s,"class","btn__toggle-group__group"),p(t,"class","btn__toggle-group")},m(u,c){w(u,t,c),d(t,e),d(e,n),d(n,i),d(t,o),d(t,s);for(let f=0;f<l.length;f+=1)l[f]&&l[f].m(s,null)},p(u,[c]){if(c&2&&Q(i,u[1]),c&31){a=u[2];let f;for(f=0;f<a.length;f+=1){const v=dn(u,a,f);l[f]?l[f].p(v,c):(l[f]=fn(v),l[f].c(),l[f].m(s,null))}for(;f<l.length;f+=1)l[f].d(1);l.length=a.length}},i:N,o:N,d(u){u&&M(t),dt(l,u)}}}function Lr(r,t,e){let{label:n=""}=t,{toggleOptions:i=[]}=t,{selectedToggleId:o=""}=t,s="",a=!0;const l=xe();async function u(c){e(0,o=c.currentTarget.getAttribute("id")),s==o?e(3,a=!a):e(3,a=!0),await Fn(),l("toggleClicked",{value:o,sortAsc:a}),s=o}return r.$$set=c=>{"label"in c&&e(1,n=c.label),"toggleOptions"in c&&e(2,i=c.toggleOptions),"selectedToggleId"in c&&e(0,o=c.selectedToggleId)},[o,n,i,a,u]}class Or extends fe{constructor(t){super(),de(this,t,Lr,Tr,ee,{label:1,toggleOptions:2,selectedToggleId:0})}}function Dr(r){let t,e,n,i,o,s,a,l;return n=new gt({props:{theme:"",href:"/#/Browse",label:"Browse"}}),o=new gt({props:{theme:"",href:"/#/Favorites",label:"Favorites"}}),a=new gt({props:{theme:"",href:"/#/Login",label:"Logout"}}),a.$on("click",dr),{c(){t=I("header"),e=I("div"),j(n.$$.fragment),i=L(),j(o.$$.fragment),s=L(),j(a.$$.fragment),p(e,"class","row align-right")},m(u,c){w(u,t,c),d(t,e),V(n,e,null),d(e,i),V(o,e,null),d(e,s),V(a,e,null),l=!0},p:N,i(u){l||(O(n.$$.fragment,u),O(o.$$.fragment,u),O(a.$$.fragment,u),l=!0)},o(u){D(n.$$.fragment,u),D(o.$$.fragment,u),D(a.$$.fragment,u),l=!1},d(u){u&&M(t),G(n),G(o),G(a)}}}class ti extends fe{constructor(t){super(),de(this,t,null,Dr,ee,{})}}function hn(r,t,e){const n=r.slice();return n[27]=t[e],n}function pn(r){let t,e;return t=new Lt({props:{id:"dogBreedDropdown",label:"Breed",options:r[0]}}),t.$on("valueChanged",r[11]),{c(){j(t.$$.fragment)},m(n,i){V(t,n,i),e=!0},p(n,i){const o={};i&1&&(o.options=n[0]),t.$set(o)},i(n){e||(O(t.$$.fragment,n),e=!0)},o(n){D(t.$$.fragment,n),e=!1},d(n){G(t,n)}}}function Rr(r){let t,e,n=r[1],i,o,s,a=r[2]&&mn(r),l=vn(r),u=r[2]&&En(r);return{c(){a&&a.c(),t=L(),e=I("div"),l.c(),i=L(),u&&u.c(),o=De(),p(e,"class","grid-4-col")},m(c,f){a&&a.m(c,f),w(c,t,f),w(c,e,f),l.m(e,null),w(c,i,f),u&&u.m(c,f),w(c,o,f),s=!0},p(c,f){c[2]?a?(a.p(c,f),f&4&&O(a,1)):(a=mn(c),a.c(),O(a,1),a.m(t.parentNode,t)):a&&(le(),D(a,1,1,()=>{a=null}),ue()),f&2&&ee(n,n=c[1])?(le(),D(l,1,1,N),ue(),l=vn(c),l.c(),O(l,1),l.m(e,null)):l.p(c,f),c[2]?u?(u.p(c,f),f&4&&O(u,1)):(u=En(c),u.c(),O(u,1),u.m(o.parentNode,o)):u&&(le(),D(u,1,1,()=>{u=null}),ue())},i(c){s||(O(a),O(l),O(u),s=!0)},o(c){D(a),D(l),D(u),s=!1},d(c){a&&a.d(c),c&&M(t),c&&M(e),l.d(c),c&&M(i),u&&u.d(c),c&&M(o)}}}function xr(r){let t;return{c(){t=I("div"),t.innerHTML=`<h2>Sorry, no dogs match the criteria you searched by! Adjust your
            search filters and try again.</h2>`,p(t,"class","error-message")},m(e,n){w(e,t,n)},p:N,i:N,o:N,d(e){e&&M(t)}}}function Mr(r){let t,e,n;return{c(){t=I("div"),e=I("h2"),n=W(r[5]),p(t,"class","error-message")},m(i,o){w(i,t,o),d(t,e),d(e,n)},p(i,o){o&32&&Q(n,i[5])},i:N,o:N,d(i){i&&M(t)}}}function mn(r){let t,e,n,i,o;return e=new Or({props:{toggleOptions:r[8],label:"Sort"}}),e.$on("toggleClicked",r[14]),i=new Je({props:{label:"Next Page"}}),i.$on("click",r[16]),{c(){t=I("div"),j(e.$$.fragment),n=L(),j(i.$$.fragment),p(t,"class","row sort")},m(s,a){w(s,t,a),V(e,t,null),d(t,n),V(i,t,null),o=!0},p:N,i(s){o||(O(e.$$.fragment,s),O(i.$$.fragment,s),o=!0)},o(s){D(e.$$.fragment,s),D(i.$$.fragment,s),o=!1},d(s){s&&M(t),G(e),G(i)}}}function wr(r){let t,e,n,i,o,s,a=r[27].breed+"",l,u,c,f,v,m=r[27].age+"",b,A,y,T,C,_=r[27].zip_code+"",g,E;return{c(){t=I("div"),e=I("dl"),n=I("span"),i=I("dt"),i.textContent="Breed:",o=L(),s=I("dd"),l=W(a),u=L(),c=I("dt"),c.textContent="Age:",f=L(),v=I("dd"),b=W(m),A=L(),y=I("dt"),y.textContent="ZipCode:",T=L(),C=I("dd"),g=W(_),E=L(),p(n,"class","info-list"),p(t,"slot","descriptionSlot")},m(h,S){w(h,t,S),d(t,e),d(e,n),d(n,i),d(n,o),d(n,s),d(s,l),d(n,u),d(n,c),d(n,f),d(n,v),d(v,b),d(n,A),d(n,y),d(n,T),d(n,C),d(C,g),d(t,E)},p(h,S){S&2&&a!==(a=h[27].breed+"")&&Q(l,a),S&2&&m!==(m=h[27].age+"")&&Q(b,m),S&2&&_!==(_=h[27].zip_code+"")&&Q(g,_)},d(h){h&&M(t)}}}function gn(r){var n;let t,e;return t=new Nt({props:{title:r[27].name,imgSrc:r[27].img,id:r[27].id,favorite:(n=r[4])==null?void 0:n.includes(r[27].id),$$slots:{descriptionSlot:[wr]},$$scope:{ctx:r}}}),t.$on("favorited",r[15]),{c(){j(t.$$.fragment)},m(i,o){V(t,i,o),e=!0},p(i,o){var a;const s={};o&2&&(s.title=i[27].name),o&2&&(s.imgSrc=i[27].img),o&2&&(s.id=i[27].id),o&18&&(s.favorite=(a=i[4])==null?void 0:a.includes(i[27].id)),o&1073741826&&(s.$$scope={dirty:o,ctx:i}),t.$set(s)},i(i){e||(O(t.$$.fragment,i),e=!0)},o(i){D(t.$$.fragment,i),e=!1},d(i){G(t,i)}}}function vn(r){let t,e,n=r[1],i=[];for(let s=0;s<n.length;s+=1)i[s]=gn(hn(r,n,s));const o=s=>D(i[s],1,1,()=>{i[s]=null});return{c(){for(let s=0;s<i.length;s+=1)i[s].c();t=De()},m(s,a){for(let l=0;l<i.length;l+=1)i[l]&&i[l].m(s,a);w(s,t,a),e=!0},p(s,a){if(a&32786){n=s[1];let l;for(l=0;l<n.length;l+=1){const u=hn(s,n,l);i[l]?(i[l].p(u,a),O(i[l],1)):(i[l]=gn(u),i[l].c(),O(i[l],1),i[l].m(t.parentNode,t))}for(le(),l=n.length;l<i.length;l+=1)o(l);ue()}},i(s){if(!e){for(let a=0;a<n.length;a+=1)O(i[a]);e=!0}},o(s){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)D(i[a]);e=!1},d(s){dt(i,s),s&&M(t)}}}function En(r){let t,e,n;return e=new Je({props:{label:"Next Page"}}),e.$on("click",r[16]),{c(){t=I("div"),j(e.$$.fragment),p(t,"class","row align-right")},m(i,o){w(i,t,o),V(e,t,null),n=!0},p:N,i(i){n||(O(e.$$.fragment,i),n=!0)},o(i){D(e.$$.fragment,i),n=!1},d(i){i&&M(t),G(e)}}}function Fr(r){let t,e,n,i,o,s,a,l,u,c,f=(r[3]?r[3]:"0")+"",v,m,b,A,y=r[0],T,C,_,g,E,h,S,P,Z,tt,we,Y,H,_e;e=new ti({});let ie=pn(r);C=new At({props:{id:"zipCodeInput",label:"Zip Code"}}),C.$on("valueChanged",r[10]),g=new Lt({props:{id:"ageMinDropdown",label:"Minimum Age",options:r[7]}}),g.$on("valueChanged",r[12]),h=new Lt({props:{id:"ageMaxDropdown",label:"Maxiumum Age",options:r[7]}}),h.$on("valueChanged",r[13]),Z=new Je({props:{label:"Search"}}),Z.$on("click",r[9]);const ht=[Mr,xr,Rr],ge=[];function Pt(k,Ae){return k[5]?0:!k[6]&&k[3]<1?1:k[1].length>0?2:-1}return~(Y=Pt(r))&&(H=ge[Y]=ht[Y](r)),{c(){t=I("main"),j(e.$$.fragment),n=L(),i=I("div"),o=I("h1"),o.textContent="Browse Adoptable Dogs",s=L(),a=I("aside"),l=I("h2"),l.textContent="Filter + Sort",u=L(),c=I("h3"),v=W(f),m=W(" dogs found"),b=L(),A=I("div"),ie.c(),T=L(),j(C.$$.fragment),_=L(),j(g.$$.fragment),E=L(),j(h.$$.fragment),S=L(),P=I("div"),j(Z.$$.fragment),tt=L(),we=I("div"),H&&H.c(),p(o,"class","row"),p(A,"class","aside-filters"),p(P,"class","align-center"),p(we,"class","browse main"),p(i,"class","core-content")},m(k,Ae){w(k,t,Ae),V(e,t,null),d(t,n),d(t,i),d(i,o),d(i,s),d(i,a),d(a,l),d(a,u),d(a,c),d(c,v),d(c,m),d(a,b),d(a,A),ie.m(A,null),d(A,T),V(C,A,null),d(A,_),V(g,A,null),d(A,E),V(h,A,null),d(a,S),d(a,P),V(Z,P,null),d(i,tt),d(i,we),~Y&&ge[Y].m(we,null),_e=!0},p(k,[Ae]){(!_e||Ae&8)&&f!==(f=(k[3]?k[3]:"0")+"")&&Q(v,f),Ae&1&&ee(y,y=k[0])?(le(),D(ie,1,1,N),ue(),ie=pn(k),ie.c(),O(ie,1),ie.m(A,T)):ie.p(k,Ae);let pt=Y;Y=Pt(k),Y===pt?~Y&&ge[Y].p(k,Ae):(H&&(le(),D(ge[pt],1,1,()=>{ge[pt]=null}),ue()),~Y?(H=ge[Y],H?H.p(k,Ae):(H=ge[Y]=ht[Y](k),H.c()),O(H,1),H.m(we,null)):H=null)},i(k){_e||(O(e.$$.fragment,k),O(ie),O(C.$$.fragment,k),O(g.$$.fragment,k),O(h.$$.fragment,k),O(Z.$$.fragment,k),O(H),_e=!0)},o(k){D(e.$$.fragment,k),D(ie),D(C.$$.fragment,k),D(g.$$.fragment,k),D(h.$$.fragment,k),D(Z.$$.fragment,k),D(H),_e=!1},d(k){k&&M(t),G(e),ie.d(k),G(C),G(g),G(h),G(Z),~Y&&ge[Y].d()}}}let Nr="";function Pr(r,t,e){let n=[],i=[],o=[],s=null,a="",l="",u=0,c=20,f="",v=[...Array(21).keys().map(String)],m=null,b="asc",A=null,y=[],T=null,C=!0,_=[{id:"breed",label:"breed"},{id:"name",label:"name"},{id:"age",label:"age"}];async function g(){e(6,C=!0);try{let H=await hr(a,l,u,c,Nr,0,m,b);await E(H),e(6,C=!1)}catch{e(6,C=!1)}}async function E(H){i=H.resultIds,e(2,s=H.next),e(3,A=H.total),f=(await Er(s)).from,Number(f)>A&&e(2,s=null),e(1,o=await Ot(i))}function h(H){l=H.detail.value}function S(H){a=H.detail.selectedOption}function P(H){u=H.detail.selectedOption}function Z(H){c=H.detail.selectedOption}function tt(H){m=H.detail.value,b=H.detail.sortAsc?"asc":"desc",g()}function we(H){let _e=H.detail.favorite,ie=H.detail.id;_e?(y.push(ie),ut(y)):y.indexOf(ie)>-1&&(e(4,y=y.filter(ge=>ge!==ie)),ut(y))}async function Y(){if(s){let H=await pr(s);E(H)}else return}return Re(async()=>{try{e(0,n=await fr()),e(4,y=ei())}catch{e(5,T="There was an issue retrieving the data, please log in and try again.")}await g()}),[n,o,s,A,y,T,C,v,_,g,h,S,P,Z,tt,we,Y]}class Hr extends fe{constructor(t){super(),de(this,t,Pr,Fr,ee,{})}}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */function kr(r,t,e){return t(r,{initialFocusEl:e})}function Br(r){return r?r.scrollHeight>r.offsetHeight:!1}function Ur(r){return r?r.scrollTop===0:!1}function Vr(r){return r?Math.ceil(r.scrollHeight-r.scrollTop)===r.clientHeight:!1}function Gr(r){var t=new Set;return[].forEach.call(r,function(e){return t.add(e.offsetTop)}),t.size>1}/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var vt="mdc-dom-focus-sentinel",$r=function(){function r(t,e){e===void 0&&(e={}),this.root=t,this.options=e,this.elFocusedBeforeTrapFocus=null}return r.prototype.trapFocus=function(){var t=this.getFocusableElements(this.root);if(t.length===0)throw new Error("FocusTrap: Element must have at least one focusable child.");this.elFocusedBeforeTrapFocus=document.activeElement instanceof HTMLElement?document.activeElement:null,this.wrapTabFocus(this.root),this.options.skipInitialFocus||this.focusInitialElement(t,this.options.initialFocusEl)},r.prototype.releaseFocus=function(){[].slice.call(this.root.querySelectorAll("."+vt)).forEach(function(t){t.parentElement.removeChild(t)}),!this.options.skipRestoreFocus&&this.elFocusedBeforeTrapFocus&&this.elFocusedBeforeTrapFocus.focus()},r.prototype.wrapTabFocus=function(t){var e=this,n=this.createSentinel(),i=this.createSentinel();n.addEventListener("focus",function(){var o=e.getFocusableElements(t);o.length>0&&o[o.length-1].focus()}),i.addEventListener("focus",function(){var o=e.getFocusableElements(t);o.length>0&&o[0].focus()}),t.insertBefore(n,t.children[0]),t.appendChild(i)},r.prototype.focusInitialElement=function(t,e){var n=0;e&&(n=Math.max(t.indexOf(e),0)),t[n].focus()},r.prototype.getFocusableElements=function(t){var e=[].slice.call(t.querySelectorAll("[autofocus], [tabindex], a, input, textarea, select, button"));return e.filter(function(n){var i=n.getAttribute("aria-disabled")==="true"||n.getAttribute("disabled")!=null||n.getAttribute("hidden")!=null||n.getAttribute("aria-hidden")==="true",o=n.tabIndex>=0&&n.getBoundingClientRect().width>0&&!n.classList.contains(vt)&&!i,s=!1;if(o){var a=getComputedStyle(n);s=a.display==="none"||a.visibility==="hidden"}return o&&!s})},r.prototype.createSentinel=function(){var t=document.createElement("div");return t.setAttribute("tabindex","0"),t.setAttribute("aria-hidden","true"),t.classList.add(vt),t},r}();/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var jr=function(){function r(){this.rafIDs=new Map}return r.prototype.request=function(t,e){var n=this;this.cancel(t);var i=requestAnimationFrame(function(o){n.rafIDs.delete(t),e(o)});this.rafIDs.set(t,i)},r.prototype.cancel=function(t){var e=this.rafIDs.get(t);e&&(cancelAnimationFrame(e),this.rafIDs.delete(t))},r.prototype.cancelAll=function(){var t=this;this.rafIDs.forEach(function(e,n){t.cancel(n)})},r.prototype.getQueue=function(){var t=[];return this.rafIDs.forEach(function(e,n){t.push(n)}),t},r}();/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var U={CLOSING:"mdc-dialog--closing",OPEN:"mdc-dialog--open",OPENING:"mdc-dialog--opening",SCROLLABLE:"mdc-dialog--scrollable",SCROLL_LOCK:"mdc-dialog-scroll-lock",STACKED:"mdc-dialog--stacked",FULLSCREEN:"mdc-dialog--fullscreen",SCROLL_DIVIDER_HEADER:"mdc-dialog-scroll-divider-header",SCROLL_DIVIDER_FOOTER:"mdc-dialog-scroll-divider-footer",SURFACE_SCRIM_SHOWN:"mdc-dialog__surface-scrim--shown",SURFACE_SCRIM_SHOWING:"mdc-dialog__surface-scrim--showing",SURFACE_SCRIM_HIDING:"mdc-dialog__surface-scrim--hiding",SCRIM_HIDDEN:"mdc-dialog__scrim--hidden"},ze={ACTION_ATTRIBUTE:"data-mdc-dialog-action",BUTTON_DEFAULT_ATTRIBUTE:"data-mdc-dialog-button-default",BUTTON_SELECTOR:".mdc-dialog__button",CLOSED_EVENT:"MDCDialog:closed",CLOSE_ACTION:"close",CLOSING_EVENT:"MDCDialog:closing",CONTAINER_SELECTOR:".mdc-dialog__container",CONTENT_SELECTOR:".mdc-dialog__content",DESTROY_ACTION:"destroy",INITIAL_FOCUS_ATTRIBUTE:"data-mdc-dialog-initial-focus",OPENED_EVENT:"MDCDialog:opened",OPENING_EVENT:"MDCDialog:opening",SCRIM_SELECTOR:".mdc-dialog__scrim",SUPPRESS_DEFAULT_PRESS_SELECTOR:["textarea",".mdc-menu .mdc-list-item",".mdc-menu .mdc-deprecated-list-item"].join(", "),SURFACE_SELECTOR:".mdc-dialog__surface"},Et={DIALOG_ANIMATION_CLOSE_TIME_MS:75,DIALOG_ANIMATION_OPEN_TIME_MS:150};/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var ct;(function(r){r.POLL_SCROLL_POS="poll_scroll_position",r.POLL_LAYOUT_CHANGE="poll_layout_change"})(ct||(ct={}));var ni=function(r){B(t,r);function t(e){var n=r.call(this,x(x({},t.defaultAdapter),e))||this;return n.dialogOpen=!1,n.isFullscreen=!1,n.animationFrame=0,n.animationTimer=0,n.escapeKeyAction=ze.CLOSE_ACTION,n.scrimClickAction=ze.CLOSE_ACTION,n.autoStackButtons=!0,n.areButtonsStacked=!1,n.suppressDefaultPressSelector=ze.SUPPRESS_DEFAULT_PRESS_SELECTOR,n.animFrame=new jr,n.contentScrollHandler=function(){n.handleScrollEvent()},n.windowResizeHandler=function(){n.layout()},n.windowOrientationChangeHandler=function(){n.layout()},n}return Object.defineProperty(t,"cssClasses",{get:function(){return U},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return ze},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return Et},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{addBodyClass:function(){},addClass:function(){},areButtonsStacked:function(){return!1},clickDefaultButton:function(){},eventTargetMatches:function(){return!1},getActionFromEvent:function(){return""},getInitialFocusEl:function(){return null},hasClass:function(){return!1},isContentScrollable:function(){return!1},notifyClosed:function(){},notifyClosing:function(){},notifyOpened:function(){},notifyOpening:function(){},releaseFocus:function(){},removeBodyClass:function(){},removeClass:function(){},reverseButtons:function(){},trapFocus:function(){},registerContentEventHandler:function(){},deregisterContentEventHandler:function(){},isScrollableContentAtTop:function(){return!1},isScrollableContentAtBottom:function(){return!1},registerWindowEventHandler:function(){},deregisterWindowEventHandler:function(){}}},enumerable:!1,configurable:!0}),t.prototype.init=function(){this.adapter.hasClass(U.STACKED)&&this.setAutoStackButtons(!1),this.isFullscreen=this.adapter.hasClass(U.FULLSCREEN)},t.prototype.destroy=function(){this.animationTimer&&(clearTimeout(this.animationTimer),this.handleAnimationTimerEnd()),this.isFullscreen&&this.adapter.deregisterContentEventHandler("scroll",this.contentScrollHandler),this.animFrame.cancelAll(),this.adapter.deregisterWindowEventHandler("resize",this.windowResizeHandler),this.adapter.deregisterWindowEventHandler("orientationchange",this.windowOrientationChangeHandler)},t.prototype.open=function(e){var n=this;this.dialogOpen=!0,this.adapter.notifyOpening(),this.adapter.addClass(U.OPENING),this.isFullscreen&&this.adapter.registerContentEventHandler("scroll",this.contentScrollHandler),e&&e.isAboveFullscreenDialog&&this.adapter.addClass(U.SCRIM_HIDDEN),this.adapter.registerWindowEventHandler("resize",this.windowResizeHandler),this.adapter.registerWindowEventHandler("orientationchange",this.windowOrientationChangeHandler),this.runNextAnimationFrame(function(){n.adapter.addClass(U.OPEN),n.adapter.addBodyClass(U.SCROLL_LOCK),n.layout(),n.animationTimer=setTimeout(function(){n.handleAnimationTimerEnd(),n.adapter.trapFocus(n.adapter.getInitialFocusEl()),n.adapter.notifyOpened()},Et.DIALOG_ANIMATION_OPEN_TIME_MS)})},t.prototype.close=function(e){var n=this;e===void 0&&(e=""),this.dialogOpen&&(this.dialogOpen=!1,this.adapter.notifyClosing(e),this.adapter.addClass(U.CLOSING),this.adapter.removeClass(U.OPEN),this.adapter.removeBodyClass(U.SCROLL_LOCK),this.isFullscreen&&this.adapter.deregisterContentEventHandler("scroll",this.contentScrollHandler),this.adapter.deregisterWindowEventHandler("resize",this.windowResizeHandler),this.adapter.deregisterWindowEventHandler("orientationchange",this.windowOrientationChangeHandler),cancelAnimationFrame(this.animationFrame),this.animationFrame=0,clearTimeout(this.animationTimer),this.animationTimer=setTimeout(function(){n.adapter.releaseFocus(),n.handleAnimationTimerEnd(),n.adapter.notifyClosed(e)},Et.DIALOG_ANIMATION_CLOSE_TIME_MS))},t.prototype.showSurfaceScrim=function(){var e=this;this.adapter.addClass(U.SURFACE_SCRIM_SHOWING),this.runNextAnimationFrame(function(){e.adapter.addClass(U.SURFACE_SCRIM_SHOWN)})},t.prototype.hideSurfaceScrim=function(){this.adapter.removeClass(U.SURFACE_SCRIM_SHOWN),this.adapter.addClass(U.SURFACE_SCRIM_HIDING)},t.prototype.handleSurfaceScrimTransitionEnd=function(){this.adapter.removeClass(U.SURFACE_SCRIM_HIDING),this.adapter.removeClass(U.SURFACE_SCRIM_SHOWING)},t.prototype.isOpen=function(){return this.dialogOpen},t.prototype.getEscapeKeyAction=function(){return this.escapeKeyAction},t.prototype.setEscapeKeyAction=function(e){this.escapeKeyAction=e},t.prototype.getScrimClickAction=function(){return this.scrimClickAction},t.prototype.setScrimClickAction=function(e){this.scrimClickAction=e},t.prototype.getAutoStackButtons=function(){return this.autoStackButtons},t.prototype.setAutoStackButtons=function(e){this.autoStackButtons=e},t.prototype.getSuppressDefaultPressSelector=function(){return this.suppressDefaultPressSelector},t.prototype.setSuppressDefaultPressSelector=function(e){this.suppressDefaultPressSelector=e},t.prototype.layout=function(){var e=this;this.animFrame.request(ct.POLL_LAYOUT_CHANGE,function(){e.layoutInternal()})},t.prototype.handleClick=function(e){var n=this.adapter.eventTargetMatches(e.target,ze.SCRIM_SELECTOR);if(n&&this.scrimClickAction!=="")this.close(this.scrimClickAction);else{var i=this.adapter.getActionFromEvent(e);i&&this.close(i)}},t.prototype.handleKeydown=function(e){var n=e.key==="Enter"||e.keyCode===13;if(n){var i=this.adapter.getActionFromEvent(e);if(!i){var o=e.composedPath?e.composedPath()[0]:e.target,s=this.suppressDefaultPressSelector?!this.adapter.eventTargetMatches(o,this.suppressDefaultPressSelector):!0;n&&s&&this.adapter.clickDefaultButton()}}},t.prototype.handleDocumentKeydown=function(e){var n=e.key==="Escape"||e.keyCode===27;n&&this.escapeKeyAction!==""&&this.close(this.escapeKeyAction)},t.prototype.handleScrollEvent=function(){var e=this;this.animFrame.request(ct.POLL_SCROLL_POS,function(){e.toggleScrollDividerHeader(),e.toggleScrollDividerFooter()})},t.prototype.layoutInternal=function(){this.autoStackButtons&&this.detectStackedButtons(),this.toggleScrollableClasses()},t.prototype.handleAnimationTimerEnd=function(){this.animationTimer=0,this.adapter.removeClass(U.OPENING),this.adapter.removeClass(U.CLOSING)},t.prototype.runNextAnimationFrame=function(e){var n=this;cancelAnimationFrame(this.animationFrame),this.animationFrame=requestAnimationFrame(function(){n.animationFrame=0,clearTimeout(n.animationTimer),n.animationTimer=setTimeout(e,0)})},t.prototype.detectStackedButtons=function(){this.adapter.removeClass(U.STACKED);var e=this.adapter.areButtonsStacked();e&&this.adapter.addClass(U.STACKED),e!==this.areButtonsStacked&&(this.adapter.reverseButtons(),this.areButtonsStacked=e)},t.prototype.toggleScrollableClasses=function(){this.adapter.removeClass(U.SCROLLABLE),this.adapter.isContentScrollable()&&(this.adapter.addClass(U.SCROLLABLE),this.isFullscreen&&(this.toggleScrollDividerHeader(),this.toggleScrollDividerFooter()))},t.prototype.toggleScrollDividerHeader=function(){this.adapter.isScrollableContentAtTop()?this.adapter.hasClass(U.SCROLL_DIVIDER_HEADER)&&this.adapter.removeClass(U.SCROLL_DIVIDER_HEADER):this.adapter.addClass(U.SCROLL_DIVIDER_HEADER)},t.prototype.toggleScrollDividerFooter=function(){this.adapter.isScrollableContentAtBottom()?this.adapter.hasClass(U.SCROLL_DIVIDER_FOOTER)&&this.adapter.removeClass(U.SCROLL_DIVIDER_FOOTER):this.adapter.addClass(U.SCROLL_DIVIDER_FOOTER)},t}(ne);/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */var te=ni.strings,qr=function(r){B(t,r);function t(){return r!==null&&r.apply(this,arguments)||this}return Object.defineProperty(t.prototype,"isOpen",{get:function(){return this.foundation.isOpen()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"escapeKeyAction",{get:function(){return this.foundation.getEscapeKeyAction()},set:function(e){this.foundation.setEscapeKeyAction(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"scrimClickAction",{get:function(){return this.foundation.getScrimClickAction()},set:function(e){this.foundation.setScrimClickAction(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"autoStackButtons",{get:function(){return this.foundation.getAutoStackButtons()},set:function(e){this.foundation.setAutoStackButtons(e)},enumerable:!1,configurable:!0}),t.attachTo=function(e){return new t(e)},t.prototype.initialize=function(e){var n,i;e===void 0&&(e=function(u,c){return new $r(u,c)});var o=this.root.querySelector(te.CONTAINER_SELECTOR);if(!o)throw new Error("Dialog component requires a "+te.CONTAINER_SELECTOR+" container element");this.container=o,this.content=this.root.querySelector(te.CONTENT_SELECTOR),this.buttons=[].slice.call(this.root.querySelectorAll(te.BUTTON_SELECTOR)),this.defaultButton=this.root.querySelector("["+te.BUTTON_DEFAULT_ATTRIBUTE+"]"),this.focusTrapFactory=e,this.buttonRipples=[];try{for(var s=ae(this.buttons),a=s.next();!a.done;a=s.next()){var l=a.value;this.buttonRipples.push(new Oe(l))}}catch(u){n={error:u}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}},t.prototype.initialSyncWithDOM=function(){var e=this;this.focusTrap=kr(this.container,this.focusTrapFactory,this.getInitialFocusEl()||void 0),this.handleClick=this.foundation.handleClick.bind(this.foundation),this.handleKeydown=this.foundation.handleKeydown.bind(this.foundation),this.handleDocumentKeydown=this.foundation.handleDocumentKeydown.bind(this.foundation),this.handleOpening=function(){document.addEventListener("keydown",e.handleDocumentKeydown)},this.handleClosing=function(){document.removeEventListener("keydown",e.handleDocumentKeydown)},this.listen("click",this.handleClick),this.listen("keydown",this.handleKeydown),this.listen(te.OPENING_EVENT,this.handleOpening),this.listen(te.CLOSING_EVENT,this.handleClosing)},t.prototype.destroy=function(){this.unlisten("click",this.handleClick),this.unlisten("keydown",this.handleKeydown),this.unlisten(te.OPENING_EVENT,this.handleOpening),this.unlisten(te.CLOSING_EVENT,this.handleClosing),this.handleClosing(),this.buttonRipples.forEach(function(e){e.destroy()}),r.prototype.destroy.call(this)},t.prototype.layout=function(){this.foundation.layout()},t.prototype.open=function(){this.foundation.open()},t.prototype.close=function(e){e===void 0&&(e=""),this.foundation.close(e)},t.prototype.getDefaultFoundation=function(){var e=this,n={addBodyClass:function(i){return document.body.classList.add(i)},addClass:function(i){return e.root.classList.add(i)},areButtonsStacked:function(){return Gr(e.buttons)},clickDefaultButton:function(){e.defaultButton&&!e.defaultButton.disabled&&e.defaultButton.click()},eventTargetMatches:function(i,o){return i?Ce(i,o):!1},getActionFromEvent:function(i){if(!i.target)return"";var o=lt(i.target,"["+te.ACTION_ATTRIBUTE+"]");return o&&o.getAttribute(te.ACTION_ATTRIBUTE)},getInitialFocusEl:function(){return e.getInitialFocusEl()},hasClass:function(i){return e.root.classList.contains(i)},isContentScrollable:function(){return Br(e.content)},notifyClosed:function(i){return e.emit(te.CLOSED_EVENT,i?{action:i}:{})},notifyClosing:function(i){return e.emit(te.CLOSING_EVENT,i?{action:i}:{})},notifyOpened:function(){return e.emit(te.OPENED_EVENT,{})},notifyOpening:function(){return e.emit(te.OPENING_EVENT,{})},releaseFocus:function(){e.focusTrap.releaseFocus()},removeBodyClass:function(i){return document.body.classList.remove(i)},removeClass:function(i){return e.root.classList.remove(i)},reverseButtons:function(){e.buttons.reverse(),e.buttons.forEach(function(i){i.parentElement.appendChild(i)})},trapFocus:function(){e.focusTrap.trapFocus()},registerContentEventHandler:function(i,o){e.content instanceof HTMLElement&&e.content.addEventListener(i,o)},deregisterContentEventHandler:function(i,o){e.content instanceof HTMLElement&&e.content.removeEventListener(i,o)},isScrollableContentAtTop:function(){return Ur(e.content)},isScrollableContentAtBottom:function(){return Vr(e.content)},registerWindowEventHandler:function(i,o){window.addEventListener(i,o)},deregisterWindowEventHandler:function(i,o){window.removeEventListener(i,o)}};return new ni(n)},t.prototype.getInitialFocusEl=function(){return this.root.querySelector("["+te.INITIAL_FOCUS_ATTRIBUTE+"]")},t}(re);const Wr=r=>({}),In=r=>({});function Kr(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A,y,T,C,_;const g=r[5].contentSlot,E=Tn(g,r,r[4],In);return{c(){t=I("div"),e=I("div"),n=I("div"),i=I("div"),o=I("h2"),s=W(r[1]),l=L(),u=I("button"),u.textContent="close",c=L(),f=I("div"),E&&E.c(),m=L(),b=I("div"),b.innerHTML=`<button type="button" class="fc-button mdc-button mdc-dialog__button" data-mdc-dialog-action="ok"><div class="mdc-button__ripple"></div> 
          <span class="mdc-button__label">OK</span></button>`,T=L(),C=I("div"),p(o,"class","mdc-dialog__title"),p(o,"id",a=`${r[0]}-dialog-title`),p(u,"class","mdc-icon-button material-icons mdc-dialog__close"),p(u,"data-mdc-dialog-action","close"),p(i,"class","mdc-dialog__header"),p(f,"class","mdc-dialog__content"),p(f,"id",v=`${r[0]}-dialog-content`),p(b,"class","mdc-dialog__actions"),p(n,"class","mdc-dialog__surface"),p(n,"role","dialog"),p(n,"aria-modal","true"),p(n,"aria-labelledby",A=`${r[0]}-dialog-title`),p(n,"aria-describedby",y=`${r[0]}-dialog-content`),p(e,"class","mdc-dialog__container"),p(C,"class","mdc-dialog__scrim"),p(t,"class","mdc-dialog mdc-dialog--fullscreen"),p(t,"id",r[0])},m(h,S){w(h,t,S),d(t,e),d(e,n),d(n,i),d(i,o),d(o,s),d(i,l),d(i,u),d(n,c),d(n,f),E&&E.m(f,null),d(n,m),d(n,b),d(t,T),d(t,C),_=!0},p(h,[S]){(!_||S&2)&&Q(s,h[1]),(!_||S&1&&a!==(a=`${h[0]}-dialog-title`))&&p(o,"id",a),E&&E.p&&(!_||S&16)&&Dn(E,g,h,h[4],_?On(g,h[4],S,Wr):Rn(h[4]),In),(!_||S&1&&v!==(v=`${h[0]}-dialog-content`))&&p(f,"id",v),(!_||S&1&&A!==(A=`${h[0]}-dialog-title`))&&p(n,"aria-labelledby",A),(!_||S&1&&y!==(y=`${h[0]}-dialog-content`))&&p(n,"aria-describedby",y),(!_||S&1)&&p(t,"id",h[0])},i(h){_||(O(E,h),_=!0)},o(h){D(E,h),_=!1},d(h){h&&M(t),E&&E.d(h)}}}function Xr(r,t,e){let{$$slots:n={},$$scope:i}=t,{id:o=""}=t,{open:s=!1}=t,{title:a=""}=t,l=null;const u=xe();return Re(()=>{e(3,l=new qr(document.querySelector(`#${o}.mdc-dialog`))),l.listen("MDCDialog:opened",c=>{u("dialogOpened",c)}),l.listen("MDCDialog:closed",c=>{u("dialogClosed",c)})}),xn(()=>{e(2,s=!1),u("closeEvent",{dialog:o})}),r.$$set=c=>{"id"in c&&e(0,o=c.id),"open"in c&&e(2,s=c.open),"title"in c&&e(1,a=c.title),"$$scope"in c&&e(4,i=c.$$scope)},r.$$.update=()=>{r.$$.dirty&12&&(s?l==null||l.open():l==null||l.close())},[o,a,s,l,i,n]}class zr extends fe{constructor(t){super(),de(this,t,Xr,Kr,ee,{id:0,open:2,title:1})}}function bn(r,t,e){const n=r.slice();return n[20]=t[e],n}function Qr(r){let t,e,n=r[0],i,o,s,a=An,l=Cn(r),u=An;return{c(){t=L(),e=I("div"),l.c(),i=L(),o=De(),p(e,"class","grid-4-col")},m(c,f){w(c,t,f),w(c,e,f),l.m(e,null),w(c,i,f),w(c,o,f),s=!0},p(c,f){f&1&&ee(n,n=c[0])?(le(),D(l,1,1,N),ue(),l=Cn(c),l.c(),O(l,1),l.m(e,null)):l.p(c,f)},i(c){s||(O(a),O(l),O(u),s=!0)},o(c){D(a),D(l),D(u),s=!1},d(c){c&&M(t),c&&M(e),l.d(c),c&&M(i),c&&M(o)}}}function Zr(r){let t;return{c(){t=I("div"),t.innerHTML=`<h2>You haven&#39;t favorited any dogs yet! Go back to the Browse page and
            click on a dog to favorite it.</h2>`,p(t,"class","error-message")},m(e,n){w(e,t,n)},p:N,i:N,o:N,d(e){e&&M(t)}}}function Yr(r){let t;return{c(){t=I("div"),t.innerHTML='<span class="loader"></span>',p(t,"class","error-message")},m(e,n){w(e,t,n)},p:N,i:N,o:N,d(e){e&&M(t)}}}function Jr(r){let t,e,n,i,o,s,a=r[20].breed+"",l,u,c,f,v,m=r[20].age+"",b,A,y,T,C,_=r[20].zip_code+"",g,E;return{c(){t=I("div"),e=I("dl"),n=I("span"),i=I("dt"),i.textContent="Breed:",o=L(),s=I("dd"),l=W(a),u=L(),c=I("dt"),c.textContent="Age:",f=L(),v=I("dd"),b=W(m),A=L(),y=I("dt"),y.textContent="ZipCode:",T=L(),C=I("dd"),g=W(_),E=L(),p(n,"class","info-list"),p(t,"slot","descriptionSlot")},m(h,S){w(h,t,S),d(t,e),d(e,n),d(n,i),d(n,o),d(n,s),d(s,l),d(n,u),d(n,c),d(n,f),d(n,v),d(v,b),d(n,A),d(n,y),d(n,T),d(n,C),d(C,g),d(t,E)},p(h,S){S&1&&a!==(a=h[20].breed+"")&&Q(l,a),S&1&&m!==(m=h[20].age+"")&&Q(b,m),S&1&&_!==(_=h[20].zip_code+"")&&Q(g,_)},d(h){h&&M(t)}}}function yn(r){var n;let t,e;return t=new Nt({props:{title:r[20].name,imgSrc:r[20].img,id:r[20].id,favorite:(n=r[2])==null?void 0:n.includes(r[20].id),$$slots:{descriptionSlot:[Jr]},$$scope:{ctx:r}}}),t.$on("favorited",r[9]),{c(){j(t.$$.fragment)},m(i,o){V(t,i,o),e=!0},p(i,o){var a;const s={};o&1&&(s.title=i[20].name),o&1&&(s.imgSrc=i[20].img),o&1&&(s.id=i[20].id),o&5&&(s.favorite=(a=i[2])==null?void 0:a.includes(i[20].id)),o&8388609&&(s.$$scope={dirty:o,ctx:i}),t.$set(s)},i(i){e||(O(t.$$.fragment,i),e=!0)},o(i){D(t.$$.fragment,i),e=!1},d(i){G(t,i)}}}function Cn(r){let t,e,n=r[0],i=[];for(let s=0;s<n.length;s+=1)i[s]=yn(bn(r,n,s));const o=s=>D(i[s],1,1,()=>{i[s]=null});return{c(){for(let s=0;s<i.length;s+=1)i[s].c();t=De()},m(s,a){for(let l=0;l<i.length;l+=1)i[l]&&i[l].m(s,a);w(s,t,a),e=!0},p(s,a){if(a&517){n=s[0];let l;for(l=0;l<n.length;l+=1){const u=bn(s,n,l);i[l]?(i[l].p(u,a),O(i[l],1)):(i[l]=yn(u),i[l].c(),O(i[l],1),i[l].m(t.parentNode,t))}for(le(),l=n.length;l<i.length;l+=1)o(l);ue()}},i(s){if(!e){for(let a=0;a<n.length;a+=1)O(i[a]);e=!0}},o(s){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)D(i[a]);e=!1},d(s){dt(i,s),s&&M(t)}}}function _n(r){var n;let t,e;return t=new zr({props:{id:"matchDialog",open:r[4],title:`Your Match is... ${(n=r[3][0])==null?void 0:n.name}!`,$$slots:{contentSlot:[io]},$$scope:{ctx:r}}}),t.$on("dialogClosed",r[7]),{c(){j(t.$$.fragment)},m(i,o){V(t,i,o),e=!0},p(i,o){var a;const s={};o&16&&(s.open=i[4]),o&8&&(s.title=`Your Match is... ${(a=i[3][0])==null?void 0:a.name}!`),o&8388620&&(s.$$scope={dirty:o,ctx:i}),t.$set(s)},i(i){e||(O(t.$$.fragment,i),e=!0)},o(i){D(t.$$.fragment,i),e=!1},d(i){G(t,i)}}}function eo(r){let t;return{c(){t=I("h3"),t.textContent=`We didn't find a match for you this time! Favorite more dogs and try
            again.`},m(e,n){w(e,t,n)},p:N,i:N,o:N,d(e){e&&M(t)}}}function to(r){var n;let t,e;return t=new Nt({props:{title:r[3][0].name,imgSrc:r[3][0].img,id:r[3][0].id,favorite:(n=r[2])==null?void 0:n.includes(r[3][0].id),$$slots:{descriptionSlot:[no]},$$scope:{ctx:r}}}),t.$on("favorited",r[9]),{c(){j(t.$$.fragment)},m(i,o){V(t,i,o),e=!0},p(i,o){var a;const s={};o&8&&(s.title=i[3][0].name),o&8&&(s.imgSrc=i[3][0].img),o&8&&(s.id=i[3][0].id),o&12&&(s.favorite=(a=i[2])==null?void 0:a.includes(i[3][0].id)),o&8388616&&(s.$$scope={dirty:o,ctx:i}),t.$set(s)},i(i){e||(O(t.$$.fragment,i),e=!0)},o(i){D(t.$$.fragment,i),e=!1},d(i){G(t,i)}}}function no(r){let t,e,n,i,o,s,a=r[3][0].breed+"",l,u,c,f,v,m=r[3][0].age+"",b,A,y,T,C,_=r[3][0].zip_code+"",g;return{c(){t=I("div"),e=I("dl"),n=I("span"),i=I("dt"),i.textContent="Breed:",o=L(),s=I("dd"),l=W(a),u=L(),c=I("dt"),c.textContent="Age:",f=L(),v=I("dd"),b=W(m),A=L(),y=I("dt"),y.textContent="ZipCode:",T=L(),C=I("dd"),g=W(_),p(n,"class","info-list"),p(t,"slot","descriptionSlot")},m(E,h){w(E,t,h),d(t,e),d(e,n),d(n,i),d(n,o),d(n,s),d(s,l),d(n,u),d(n,c),d(n,f),d(n,v),d(v,b),d(n,A),d(n,y),d(n,T),d(n,C),d(C,g)},p(E,h){h&8&&a!==(a=E[3][0].breed+"")&&Q(l,a),h&8&&m!==(m=E[3][0].age+"")&&Q(b,m),h&8&&_!==(_=E[3][0].zip_code+"")&&Q(g,_)},d(E){E&&M(t)}}}function io(r){let t,e,n,i,o;const s=[to,eo],a=[];function l(u,c){return u[3]?0:1}return n=l(r),i=a[n]=s[n](r),{c(){t=I("div"),e=I("div"),i.c(),p(e,"class","match"),p(t,"slot","contentSlot")},m(u,c){w(u,t,c),d(t,e),a[n].m(e,null),o=!0},p(u,c){let f=n;n=l(u),n===f?a[n].p(u,c):(le(),D(a[f],1,1,()=>{a[f]=null}),ue(),i=a[n],i?i.p(u,c):(i=a[n]=s[n](u),i.c()),O(i,1),i.m(e,null))},i(u){o||(O(i),o=!0)},o(u){D(i),o=!1},d(u){u&&M(t),a[n].d()}}}function ro(r){let t,e,n,i,o,s,a,l,u,c,f,v,m,b,A,y,T;e=new ti({}),l=new Je({props:{label:"Get My Match"}}),l.$on("click",r[6]);const C=[Yr,Zr,Qr],_=[];function g(h,S){return h[5]?0:h[1]<1?1:h[0].length>0?2:-1}~(m=g(r))&&(b=_[m]=C[m](r));let E=r[3]&&_n(r);return{c(){t=I("main"),j(e.$$.fragment),n=L(),i=I("div"),o=I("h1"),o.textContent="My Favorite Dogs",s=L(),a=I("div"),j(l.$$.fragment),u=L(),c=I("div"),f=I("div"),v=L(),b&&b.c(),A=L(),E&&E.c(),y=De(),p(o,"class","row"),p(a,"class","row align-center"),p(c,"class","favorites main"),p(i,"class","core-content")},m(h,S){w(h,t,S),V(e,t,null),d(t,n),d(t,i),d(i,o),d(i,s),d(i,a),V(l,a,null),d(i,u),d(i,c),d(c,f),d(c,v),~m&&_[m].m(c,null),w(h,A,S),E&&E.m(h,S),w(h,y,S),T=!0},p(h,[S]){let P=m;m=g(h),m===P?~m&&_[m].p(h,S):(b&&(le(),D(_[P],1,1,()=>{_[P]=null}),ue()),~m?(b=_[m],b?b.p(h,S):(b=_[m]=C[m](h),b.c()),O(b,1),b.m(c,null)):b=null),h[3]?E?(E.p(h,S),S&8&&O(E,1)):(E=_n(h),E.c(),O(E,1),E.m(y.parentNode,y)):E&&(le(),D(E,1,1,()=>{E=null}),ue())},i(h){T||(O(e.$$.fragment,h),O(l.$$.fragment,h),O(b),O(E),T=!0)},o(h){D(e.$$.fragment,h),D(l.$$.fragment,h),D(b),D(E),T=!1},d(h){h&&M(t),G(e),G(l),~m&&_[m].d(),h&&M(A),E&&E.d(h),h&&M(y)}}}let An=null;function oo(r,t,e){let n=[];[...Array(21).keys().map(String)];let i=null,o=[],s=null,a=null,l=!1,u=!0;async function c(y){e(1,i=y.length),e(0,n=await Ot(y))}async function f(){await A(),e(4,l=!0)}function v(){e(4,l=!1)}async function m(){}function b(y){let T=y.detail.favorite,C=y.detail.id;T?(o.push(C),ut(o)):o.indexOf(C)>-1&&(e(2,o=o.filter(g=>g!==C)),ut(o))}async function A(){s=await mr(o),e(3,a=await Ot([s.match]))}return Re(async()=>{try{e(5,u=!0),e(2,o=ei());let y=await c(o);e(5,u=!1)}catch{}}),[n,i,o,a,l,u,f,v,m,b]}class so extends fe{constructor(t){super(),de(this,t,oo,ro,ee,{})}}function ao(r){let t,e;return t=new Ei({props:{routes:r[0]}}),{c(){j(t.$$.fragment)},m(n,i){V(t,n,i),e=!0},p:N,i(n){e||(O(t.$$.fragment,n),e=!0)},o(n){D(t.$$.fragment,n),e=!1},d(n){G(t,n)}}}function lo(r){return[{"/login":un,"/browse":Hr,"/favorites":so,"*":un}]}class uo extends fe{constructor(t){super(),de(this,t,lo,ao,ee,{})}}new uo({target:document.getElementById("app")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
